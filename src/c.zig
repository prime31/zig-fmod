pub const FMOD_BOOL = c_int;
pub const struct_FMOD_SYSTEM = @Type(.Opaque);
pub const FMOD_SYSTEM = struct_FMOD_SYSTEM;
pub const struct_FMOD_SOUND = @Type(.Opaque);
pub const FMOD_SOUND = struct_FMOD_SOUND;
pub const struct_FMOD_CHANNELCONTROL = @Type(.Opaque);
pub const FMOD_CHANNELCONTROL = struct_FMOD_CHANNELCONTROL;
pub const struct_FMOD_CHANNEL = @Type(.Opaque);
pub const FMOD_CHANNEL = struct_FMOD_CHANNEL;
pub const struct_FMOD_CHANNELGROUP = @Type(.Opaque);
pub const FMOD_CHANNELGROUP = struct_FMOD_CHANNELGROUP;
pub const struct_FMOD_SOUNDGROUP = @Type(.Opaque);
pub const FMOD_SOUNDGROUP = struct_FMOD_SOUNDGROUP;
pub const struct_FMOD_REVERB3D = @Type(.Opaque);
pub const FMOD_REVERB3D = struct_FMOD_REVERB3D;
pub const struct_FMOD_DSP = @Type(.Opaque);
pub const FMOD_DSP = struct_FMOD_DSP;
pub const struct_FMOD_DSPCONNECTION = @Type(.Opaque);
pub const FMOD_DSPCONNECTION = struct_FMOD_DSPCONNECTION;
pub const struct_FMOD_POLYGON = @Type(.Opaque);
pub const FMOD_POLYGON = struct_FMOD_POLYGON;
pub const struct_FMOD_GEOMETRY = @Type(.Opaque);
pub const FMOD_GEOMETRY = struct_FMOD_GEOMETRY;
pub const struct_FMOD_SYNCPOINT = @Type(.Opaque);
pub const FMOD_SYNCPOINT = struct_FMOD_SYNCPOINT;
pub const struct_FMOD_ASYNCREADINFO = extern struct {
    handle: ?*c_void,
    offset: c_uint,
    sizebytes: c_uint,
    priority: c_int,
    userdata: ?*c_void,
    buffer: ?*c_void,
    bytesread: c_uint,
    done: FMOD_FILE_ASYNCDONE_FUNC,
};
pub const FMOD_ASYNCREADINFO = struct_FMOD_ASYNCREADINFO;
pub const FMOD_PORT_TYPE = c_uint;
pub const FMOD_PORT_INDEX = c_ulonglong;
pub const FMOD_DEBUG_FLAGS = c_uint;
pub const FMOD_MEMORY_TYPE = c_uint;
pub const FMOD_INITFLAGS = c_uint;
pub const FMOD_DRIVER_STATE = c_uint;
pub const FMOD_TIMEUNIT = c_uint;
pub const FMOD_SYSTEM_CALLBACK_TYPE = c_uint;
pub const FMOD_MODE = c_uint;
pub const FMOD_CHANNELMASK = c_uint;
pub const FMOD_THREAD_PRIORITY = c_int;
pub const FMOD_THREAD_STACK_SIZE = c_uint;
pub const FMOD_THREAD_AFFINITY = c_ulonglong;
pub const FMOD_THREAD_TYPE_MIXER = @enumToInt(enum_FMOD_THREAD_TYPE._MIXER);
pub const FMOD_THREAD_TYPE_FEEDER = @enumToInt(enum_FMOD_THREAD_TYPE._FEEDER);
pub const FMOD_THREAD_TYPE_STREAM = @enumToInt(enum_FMOD_THREAD_TYPE._STREAM);
pub const FMOD_THREAD_TYPE_FILE = @enumToInt(enum_FMOD_THREAD_TYPE._FILE);
pub const FMOD_THREAD_TYPE_NONBLOCKING = @enumToInt(enum_FMOD_THREAD_TYPE._NONBLOCKING);
pub const FMOD_THREAD_TYPE_RECORD = @enumToInt(enum_FMOD_THREAD_TYPE._RECORD);
pub const FMOD_THREAD_TYPE_GEOMETRY = @enumToInt(enum_FMOD_THREAD_TYPE._GEOMETRY);
pub const FMOD_THREAD_TYPE_PROFILER = @enumToInt(enum_FMOD_THREAD_TYPE._PROFILER);
pub const FMOD_THREAD_TYPE_STUDIO_UPDATE = @enumToInt(enum_FMOD_THREAD_TYPE._STUDIO_UPDATE);
pub const FMOD_THREAD_TYPE_STUDIO_LOAD_BANK = @enumToInt(enum_FMOD_THREAD_TYPE._STUDIO_LOAD_BANK);
pub const FMOD_THREAD_TYPE_STUDIO_LOAD_SAMPLE = @enumToInt(enum_FMOD_THREAD_TYPE._STUDIO_LOAD_SAMPLE);
pub const FMOD_THREAD_TYPE_CONVOLUTION1 = @enumToInt(enum_FMOD_THREAD_TYPE._CONVOLUTION1);
pub const FMOD_THREAD_TYPE_CONVOLUTION2 = @enumToInt(enum_FMOD_THREAD_TYPE._CONVOLUTION2);
pub const FMOD_THREAD_TYPE_MAX = @enumToInt(enum_FMOD_THREAD_TYPE._MAX);
pub const FMOD_THREAD_TYPE_FORCEINT = @enumToInt(enum_FMOD_THREAD_TYPE._FORCEINT);
pub const enum_FMOD_THREAD_TYPE = extern enum(c_int) {
    _MIXER = 0,
    _FEEDER = 1,
    _STREAM = 2,
    _FILE = 3,
    _NONBLOCKING = 4,
    _RECORD = 5,
    _GEOMETRY = 6,
    _PROFILER = 7,
    _STUDIO_UPDATE = 8,
    _STUDIO_LOAD_BANK = 9,
    _STUDIO_LOAD_SAMPLE = 10,
    _CONVOLUTION1 = 11,
    _CONVOLUTION2 = 12,
    _MAX = 13,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_THREAD_TYPE = enum_FMOD_THREAD_TYPE;
pub const FMOD_OK = @enumToInt(enum_FMOD_RESULT.FMOD_OK);
pub const FMOD_ERR_BADCOMMAND = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_BADCOMMAND);
pub const FMOD_ERR_CHANNEL_ALLOC = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_CHANNEL_ALLOC);
pub const FMOD_ERR_CHANNEL_STOLEN = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_CHANNEL_STOLEN);
pub const FMOD_ERR_DMA = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_DMA);
pub const FMOD_ERR_DSP_CONNECTION = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_DSP_CONNECTION);
pub const FMOD_ERR_DSP_DONTPROCESS = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_DSP_DONTPROCESS);
pub const FMOD_ERR_DSP_FORMAT = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_DSP_FORMAT);
pub const FMOD_ERR_DSP_INUSE = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_DSP_INUSE);
pub const FMOD_ERR_DSP_NOTFOUND = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_DSP_NOTFOUND);
pub const FMOD_ERR_DSP_RESERVED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_DSP_RESERVED);
pub const FMOD_ERR_DSP_SILENCE = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_DSP_SILENCE);
pub const FMOD_ERR_DSP_TYPE = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_DSP_TYPE);
pub const FMOD_ERR_FILE_BAD = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_FILE_BAD);
pub const FMOD_ERR_FILE_COULDNOTSEEK = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_FILE_COULDNOTSEEK);
pub const FMOD_ERR_FILE_DISKEJECTED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_FILE_DISKEJECTED);
pub const FMOD_ERR_FILE_EOF = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_FILE_EOF);
pub const FMOD_ERR_FILE_ENDOFDATA = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_FILE_ENDOFDATA);
pub const FMOD_ERR_FILE_NOTFOUND = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_FILE_NOTFOUND);
pub const FMOD_ERR_FORMAT = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_FORMAT);
pub const FMOD_ERR_HEADER_MISMATCH = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_HEADER_MISMATCH);
pub const FMOD_ERR_HTTP = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_HTTP);
pub const FMOD_ERR_HTTP_ACCESS = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_HTTP_ACCESS);
pub const FMOD_ERR_HTTP_PROXY_AUTH = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_HTTP_PROXY_AUTH);
pub const FMOD_ERR_HTTP_SERVER_ERROR = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_HTTP_SERVER_ERROR);
pub const FMOD_ERR_HTTP_TIMEOUT = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_HTTP_TIMEOUT);
pub const FMOD_ERR_INITIALIZATION = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_INITIALIZATION);
pub const FMOD_ERR_INITIALIZED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_INITIALIZED);
pub const FMOD_ERR_INTERNAL = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_INTERNAL);
pub const FMOD_ERR_INVALID_FLOAT = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_INVALID_FLOAT);
pub const FMOD_ERR_INVALID_HANDLE = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_INVALID_HANDLE);
pub const FMOD_ERR_INVALID_PARAM = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_INVALID_PARAM);
pub const FMOD_ERR_INVALID_POSITION = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_INVALID_POSITION);
pub const FMOD_ERR_INVALID_SPEAKER = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_INVALID_SPEAKER);
pub const FMOD_ERR_INVALID_SYNCPOINT = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_INVALID_SYNCPOINT);
pub const FMOD_ERR_INVALID_THREAD = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_INVALID_THREAD);
pub const FMOD_ERR_INVALID_VECTOR = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_INVALID_VECTOR);
pub const FMOD_ERR_MAXAUDIBLE = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_MAXAUDIBLE);
pub const FMOD_ERR_MEMORY = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_MEMORY);
pub const FMOD_ERR_MEMORY_CANTPOINT = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_MEMORY_CANTPOINT);
pub const FMOD_ERR_NEEDS3D = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_NEEDS3D);
pub const FMOD_ERR_NEEDSHARDWARE = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_NEEDSHARDWARE);
pub const FMOD_ERR_NET_CONNECT = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_NET_CONNECT);
pub const FMOD_ERR_NET_SOCKET_ERROR = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_NET_SOCKET_ERROR);
pub const FMOD_ERR_NET_URL = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_NET_URL);
pub const FMOD_ERR_NET_WOULD_BLOCK = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_NET_WOULD_BLOCK);
pub const FMOD_ERR_NOTREADY = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_NOTREADY);
pub const FMOD_ERR_OUTPUT_ALLOCATED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_OUTPUT_ALLOCATED);
pub const FMOD_ERR_OUTPUT_CREATEBUFFER = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_OUTPUT_CREATEBUFFER);
pub const FMOD_ERR_OUTPUT_DRIVERCALL = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_OUTPUT_DRIVERCALL);
pub const FMOD_ERR_OUTPUT_FORMAT = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_OUTPUT_FORMAT);
pub const FMOD_ERR_OUTPUT_INIT = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_OUTPUT_INIT);
pub const FMOD_ERR_OUTPUT_NODRIVERS = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_OUTPUT_NODRIVERS);
pub const FMOD_ERR_PLUGIN = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_PLUGIN);
pub const FMOD_ERR_PLUGIN_MISSING = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_PLUGIN_MISSING);
pub const FMOD_ERR_PLUGIN_RESOURCE = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_PLUGIN_RESOURCE);
pub const FMOD_ERR_PLUGIN_VERSION = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_PLUGIN_VERSION);
pub const FMOD_ERR_RECORD = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_RECORD);
pub const FMOD_ERR_REVERB_CHANNELGROUP = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_REVERB_CHANNELGROUP);
pub const FMOD_ERR_REVERB_INSTANCE = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_REVERB_INSTANCE);
pub const FMOD_ERR_SUBSOUNDS = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_SUBSOUNDS);
pub const FMOD_ERR_SUBSOUND_ALLOCATED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_SUBSOUND_ALLOCATED);
pub const FMOD_ERR_SUBSOUND_CANTMOVE = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_SUBSOUND_CANTMOVE);
pub const FMOD_ERR_TAGNOTFOUND = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_TAGNOTFOUND);
pub const FMOD_ERR_TOOMANYCHANNELS = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_TOOMANYCHANNELS);
pub const FMOD_ERR_TRUNCATED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_TRUNCATED);
pub const FMOD_ERR_UNIMPLEMENTED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_UNIMPLEMENTED);
pub const FMOD_ERR_UNINITIALIZED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_UNINITIALIZED);
pub const FMOD_ERR_UNSUPPORTED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_UNSUPPORTED);
pub const FMOD_ERR_VERSION = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_VERSION);
pub const FMOD_ERR_EVENT_ALREADY_LOADED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_EVENT_ALREADY_LOADED);
pub const FMOD_ERR_EVENT_LIVEUPDATE_BUSY = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_EVENT_LIVEUPDATE_BUSY);
pub const FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH);
pub const FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT);
pub const FMOD_ERR_EVENT_NOTFOUND = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_EVENT_NOTFOUND);
pub const FMOD_ERR_STUDIO_UNINITIALIZED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_STUDIO_UNINITIALIZED);
pub const FMOD_ERR_STUDIO_NOT_LOADED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_STUDIO_NOT_LOADED);
pub const FMOD_ERR_INVALID_STRING = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_INVALID_STRING);
pub const FMOD_ERR_ALREADY_LOCKED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_ALREADY_LOCKED);
pub const FMOD_ERR_NOT_LOCKED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_NOT_LOCKED);
pub const FMOD_ERR_RECORD_DISCONNECTED = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_RECORD_DISCONNECTED);
pub const FMOD_ERR_TOOMANYSAMPLES = @enumToInt(enum_FMOD_RESULT.FMOD_ERR_TOOMANYSAMPLES);
pub const FMOD_RESULT_FORCEINT = @enumToInt(enum_FMOD_RESULT._FORCEINT);
pub const enum_FMOD_RESULT = extern enum(c_int) {
    FMOD_OK = 0,
    FMOD_ERR_BADCOMMAND = 1,
    FMOD_ERR_CHANNEL_ALLOC = 2,
    FMOD_ERR_CHANNEL_STOLEN = 3,
    FMOD_ERR_DMA = 4,
    FMOD_ERR_DSP_CONNECTION = 5,
    FMOD_ERR_DSP_DONTPROCESS = 6,
    FMOD_ERR_DSP_FORMAT = 7,
    FMOD_ERR_DSP_INUSE = 8,
    FMOD_ERR_DSP_NOTFOUND = 9,
    FMOD_ERR_DSP_RESERVED = 10,
    FMOD_ERR_DSP_SILENCE = 11,
    FMOD_ERR_DSP_TYPE = 12,
    FMOD_ERR_FILE_BAD = 13,
    FMOD_ERR_FILE_COULDNOTSEEK = 14,
    FMOD_ERR_FILE_DISKEJECTED = 15,
    FMOD_ERR_FILE_EOF = 16,
    FMOD_ERR_FILE_ENDOFDATA = 17,
    FMOD_ERR_FILE_NOTFOUND = 18,
    FMOD_ERR_FORMAT = 19,
    FMOD_ERR_HEADER_MISMATCH = 20,
    FMOD_ERR_HTTP = 21,
    FMOD_ERR_HTTP_ACCESS = 22,
    FMOD_ERR_HTTP_PROXY_AUTH = 23,
    FMOD_ERR_HTTP_SERVER_ERROR = 24,
    FMOD_ERR_HTTP_TIMEOUT = 25,
    FMOD_ERR_INITIALIZATION = 26,
    FMOD_ERR_INITIALIZED = 27,
    FMOD_ERR_INTERNAL = 28,
    FMOD_ERR_INVALID_FLOAT = 29,
    FMOD_ERR_INVALID_HANDLE = 30,
    FMOD_ERR_INVALID_PARAM = 31,
    FMOD_ERR_INVALID_POSITION = 32,
    FMOD_ERR_INVALID_SPEAKER = 33,
    FMOD_ERR_INVALID_SYNCPOINT = 34,
    FMOD_ERR_INVALID_THREAD = 35,
    FMOD_ERR_INVALID_VECTOR = 36,
    FMOD_ERR_MAXAUDIBLE = 37,
    FMOD_ERR_MEMORY = 38,
    FMOD_ERR_MEMORY_CANTPOINT = 39,
    FMOD_ERR_NEEDS3D = 40,
    FMOD_ERR_NEEDSHARDWARE = 41,
    FMOD_ERR_NET_CONNECT = 42,
    FMOD_ERR_NET_SOCKET_ERROR = 43,
    FMOD_ERR_NET_URL = 44,
    FMOD_ERR_NET_WOULD_BLOCK = 45,
    FMOD_ERR_NOTREADY = 46,
    FMOD_ERR_OUTPUT_ALLOCATED = 47,
    FMOD_ERR_OUTPUT_CREATEBUFFER = 48,
    FMOD_ERR_OUTPUT_DRIVERCALL = 49,
    FMOD_ERR_OUTPUT_FORMAT = 50,
    FMOD_ERR_OUTPUT_INIT = 51,
    FMOD_ERR_OUTPUT_NODRIVERS = 52,
    FMOD_ERR_PLUGIN = 53,
    FMOD_ERR_PLUGIN_MISSING = 54,
    FMOD_ERR_PLUGIN_RESOURCE = 55,
    FMOD_ERR_PLUGIN_VERSION = 56,
    FMOD_ERR_RECORD = 57,
    FMOD_ERR_REVERB_CHANNELGROUP = 58,
    FMOD_ERR_REVERB_INSTANCE = 59,
    FMOD_ERR_SUBSOUNDS = 60,
    FMOD_ERR_SUBSOUND_ALLOCATED = 61,
    FMOD_ERR_SUBSOUND_CANTMOVE = 62,
    FMOD_ERR_TAGNOTFOUND = 63,
    FMOD_ERR_TOOMANYCHANNELS = 64,
    FMOD_ERR_TRUNCATED = 65,
    FMOD_ERR_UNIMPLEMENTED = 66,
    FMOD_ERR_UNINITIALIZED = 67,
    FMOD_ERR_UNSUPPORTED = 68,
    FMOD_ERR_VERSION = 69,
    FMOD_ERR_EVENT_ALREADY_LOADED = 70,
    FMOD_ERR_EVENT_LIVEUPDATE_BUSY = 71,
    FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH = 72,
    FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT = 73,
    FMOD_ERR_EVENT_NOTFOUND = 74,
    FMOD_ERR_STUDIO_UNINITIALIZED = 75,
    FMOD_ERR_STUDIO_NOT_LOADED = 76,
    FMOD_ERR_INVALID_STRING = 77,
    FMOD_ERR_ALREADY_LOCKED = 78,
    FMOD_ERR_NOT_LOCKED = 79,
    FMOD_ERR_RECORD_DISCONNECTED = 80,
    FMOD_ERR_TOOMANYSAMPLES = 81,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_RESULT = enum_FMOD_RESULT;
pub const FMOD_CHANNELCONTROL_CHANNEL = @enumToInt(enum_FMOD_CHANNELCONTROL_TYPE.FMOD_CHANNELCONTROL_CHANNEL);
pub const FMOD_CHANNELCONTROL_CHANNELGROUP = @enumToInt(enum_FMOD_CHANNELCONTROL_TYPE.FMOD_CHANNELCONTROL_CHANNELGROUP);
pub const FMOD_CHANNELCONTROL_MAX = @enumToInt(enum_FMOD_CHANNELCONTROL_TYPE.FMOD_CHANNELCONTROL_MAX);
pub const FMOD_CHANNELCONTROL_FORCEINT = @enumToInt(enum_FMOD_CHANNELCONTROL_TYPE.FMOD_CHANNELCONTROL_FORCEINT);
pub const enum_FMOD_CHANNELCONTROL_TYPE = extern enum(c_int) {
    FMOD_CHANNELCONTROL_CHANNEL = 0,
    FMOD_CHANNELCONTROL_CHANNELGROUP = 1,
    FMOD_CHANNELCONTROL_MAX = 2,
    FMOD_CHANNELCONTROL_FORCEINT = 65536,
    _,
};
pub const FMOD_CHANNELCONTROL_TYPE = enum_FMOD_CHANNELCONTROL_TYPE;
pub const FMOD_OUTPUTTYPE_AUTODETECT = @enumToInt(enum_FMOD_OUTPUTTYPE._AUTODETECT);
pub const FMOD_OUTPUTTYPE_UNKNOWN = @enumToInt(enum_FMOD_OUTPUTTYPE._UNKNOWN);
pub const FMOD_OUTPUTTYPE_NOSOUND = @enumToInt(enum_FMOD_OUTPUTTYPE._NOSOUND);
pub const FMOD_OUTPUTTYPE_WAVWRITER = @enumToInt(enum_FMOD_OUTPUTTYPE._WAVWRITER);
pub const FMOD_OUTPUTTYPE_NOSOUND_NRT = @enumToInt(enum_FMOD_OUTPUTTYPE._NOSOUND_NRT);
pub const FMOD_OUTPUTTYPE_WAVWRITER_NRT = @enumToInt(enum_FMOD_OUTPUTTYPE._WAVWRITER_NRT);
pub const FMOD_OUTPUTTYPE_WASAPI = @enumToInt(enum_FMOD_OUTPUTTYPE._WASAPI);
pub const FMOD_OUTPUTTYPE_ASIO = @enumToInt(enum_FMOD_OUTPUTTYPE._ASIO);
pub const FMOD_OUTPUTTYPE_PULSEAUDIO = @enumToInt(enum_FMOD_OUTPUTTYPE._PULSEAUDIO);
pub const FMOD_OUTPUTTYPE_ALSA = @enumToInt(enum_FMOD_OUTPUTTYPE._ALSA);
pub const FMOD_OUTPUTTYPE_COREAUDIO = @enumToInt(enum_FMOD_OUTPUTTYPE._COREAUDIO);
pub const FMOD_OUTPUTTYPE_AUDIOTRACK = @enumToInt(enum_FMOD_OUTPUTTYPE._AUDIOTRACK);
pub const FMOD_OUTPUTTYPE_OPENSL = @enumToInt(enum_FMOD_OUTPUTTYPE._OPENSL);
pub const FMOD_OUTPUTTYPE_AUDIOOUT = @enumToInt(enum_FMOD_OUTPUTTYPE._AUDIOOUT);
pub const FMOD_OUTPUTTYPE_AUDIO3D = @enumToInt(enum_FMOD_OUTPUTTYPE._AUDIO3D);
pub const FMOD_OUTPUTTYPE_WEBAUDIO = @enumToInt(enum_FMOD_OUTPUTTYPE._WEBAUDIO);
pub const FMOD_OUTPUTTYPE_NNAUDIO = @enumToInt(enum_FMOD_OUTPUTTYPE._NNAUDIO);
pub const FMOD_OUTPUTTYPE_WINSONIC = @enumToInt(enum_FMOD_OUTPUTTYPE._WINSONIC);
pub const FMOD_OUTPUTTYPE_AAUDIO = @enumToInt(enum_FMOD_OUTPUTTYPE._AAUDIO);
pub const FMOD_OUTPUTTYPE_MAX = @enumToInt(enum_FMOD_OUTPUTTYPE._MAX);
pub const FMOD_OUTPUTTYPE_FORCEINT = @enumToInt(enum_FMOD_OUTPUTTYPE._FORCEINT);
pub const enum_FMOD_OUTPUTTYPE = extern enum(c_int) {
    _AUTODETECT = 0,
    _UNKNOWN = 1,
    _NOSOUND = 2,
    _WAVWRITER = 3,
    _NOSOUND_NRT = 4,
    _WAVWRITER_NRT = 5,
    _WASAPI = 6,
    _ASIO = 7,
    _PULSEAUDIO = 8,
    _ALSA = 9,
    _COREAUDIO = 10,
    _AUDIOTRACK = 11,
    _OPENSL = 12,
    _AUDIOOUT = 13,
    _AUDIO3D = 14,
    _WEBAUDIO = 15,
    _NNAUDIO = 16,
    _WINSONIC = 17,
    _AAUDIO = 18,
    _MAX = 19,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_OUTPUTTYPE = enum_FMOD_OUTPUTTYPE;
pub const FMOD_DEBUG_MODE_TTY = @enumToInt(enum_FMOD_DEBUG_MODE._TTY);
pub const FMOD_DEBUG_MODE_FILE = @enumToInt(enum_FMOD_DEBUG_MODE._FILE);
pub const FMOD_DEBUG_MODE_CALLBACK = @enumToInt(enum_FMOD_DEBUG_MODE._CALLBACK);
pub const FMOD_DEBUG_MODE_FORCEINT = @enumToInt(enum_FMOD_DEBUG_MODE._FORCEINT);
pub const enum_FMOD_DEBUG_MODE = extern enum(c_int) {
    _TTY = 0,
    _FILE = 1,
    _CALLBACK = 2,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_DEBUG_MODE = enum_FMOD_DEBUG_MODE;
pub const FMOD_SPEAKERMODE_DEFAULT = @enumToInt(enum_FMOD_SPEAKERMODE._DEFAULT);
pub const FMOD_SPEAKERMODE_RAW = @enumToInt(enum_FMOD_SPEAKERMODE._RAW);
pub const FMOD_SPEAKERMODE_MONO = @enumToInt(enum_FMOD_SPEAKERMODE._MONO);
pub const FMOD_SPEAKERMODE_STEREO = @enumToInt(enum_FMOD_SPEAKERMODE._STEREO);
pub const FMOD_SPEAKERMODE_QUAD = @enumToInt(enum_FMOD_SPEAKERMODE._QUAD);
pub const FMOD_SPEAKERMODE_SURROUND = @enumToInt(enum_FMOD_SPEAKERMODE._SURROUND);
pub const FMOD_SPEAKERMODE_5POINT1 = @enumToInt(enum_FMOD_SPEAKERMODE._5POINT1);
pub const FMOD_SPEAKERMODE_7POINT1 = @enumToInt(enum_FMOD_SPEAKERMODE._7POINT1);
pub const FMOD_SPEAKERMODE_7POINT1POINT4 = @enumToInt(enum_FMOD_SPEAKERMODE._7POINT1POINT4);
pub const FMOD_SPEAKERMODE_MAX = @enumToInt(enum_FMOD_SPEAKERMODE._MAX);
pub const FMOD_SPEAKERMODE_FORCEINT = @enumToInt(enum_FMOD_SPEAKERMODE._FORCEINT);
pub const enum_FMOD_SPEAKERMODE = extern enum(c_int) {
    _DEFAULT = 0,
    _RAW = 1,
    _MONO = 2,
    _STEREO = 3,
    _QUAD = 4,
    _SURROUND = 5,
    _5POINT1 = 6,
    _7POINT1 = 7,
    _7POINT1POINT4 = 8,
    _MAX = 9,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_SPEAKERMODE = enum_FMOD_SPEAKERMODE;
pub const FMOD_SPEAKER_NONE = @enumToInt(enum_FMOD_SPEAKER._NONE);
pub const FMOD_SPEAKER_FRONT_LEFT = @enumToInt(enum_FMOD_SPEAKER._FRONT_LEFT);
pub const FMOD_SPEAKER_FRONT_RIGHT = @enumToInt(enum_FMOD_SPEAKER._FRONT_RIGHT);
pub const FMOD_SPEAKER_FRONT_CENTER = @enumToInt(enum_FMOD_SPEAKER._FRONT_CENTER);
pub const FMOD_SPEAKER_LOW_FREQUENCY = @enumToInt(enum_FMOD_SPEAKER._LOW_FREQUENCY);
pub const FMOD_SPEAKER_SURROUND_LEFT = @enumToInt(enum_FMOD_SPEAKER._SURROUND_LEFT);
pub const FMOD_SPEAKER_SURROUND_RIGHT = @enumToInt(enum_FMOD_SPEAKER._SURROUND_RIGHT);
pub const FMOD_SPEAKER_BACK_LEFT = @enumToInt(enum_FMOD_SPEAKER._BACK_LEFT);
pub const FMOD_SPEAKER_BACK_RIGHT = @enumToInt(enum_FMOD_SPEAKER._BACK_RIGHT);
pub const FMOD_SPEAKER_TOP_FRONT_LEFT = @enumToInt(enum_FMOD_SPEAKER._TOP_FRONT_LEFT);
pub const FMOD_SPEAKER_TOP_FRONT_RIGHT = @enumToInt(enum_FMOD_SPEAKER._TOP_FRONT_RIGHT);
pub const FMOD_SPEAKER_TOP_BACK_LEFT = @enumToInt(enum_FMOD_SPEAKER._TOP_BACK_LEFT);
pub const FMOD_SPEAKER_TOP_BACK_RIGHT = @enumToInt(enum_FMOD_SPEAKER._TOP_BACK_RIGHT);
pub const FMOD_SPEAKER_MAX = @enumToInt(enum_FMOD_SPEAKER._MAX);
pub const FMOD_SPEAKER_FORCEINT = @enumToInt(enum_FMOD_SPEAKER._FORCEINT);
pub const enum_FMOD_SPEAKER = extern enum(c_int) {
    _NONE = -1,
    _FRONT_LEFT = 0,
    _FRONT_RIGHT = 1,
    _FRONT_CENTER = 2,
    _LOW_FREQUENCY = 3,
    _SURROUND_LEFT = 4,
    _SURROUND_RIGHT = 5,
    _BACK_LEFT = 6,
    _BACK_RIGHT = 7,
    _TOP_FRONT_LEFT = 8,
    _TOP_FRONT_RIGHT = 9,
    _TOP_BACK_LEFT = 10,
    _TOP_BACK_RIGHT = 11,
    _MAX = 12,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_SPEAKER = enum_FMOD_SPEAKER;
pub const FMOD_CHANNELORDER_DEFAULT = @enumToInt(enum_FMOD_CHANNELORDER._DEFAULT);
pub const FMOD_CHANNELORDER_WAVEFORMAT = @enumToInt(enum_FMOD_CHANNELORDER._WAVEFORMAT);
pub const FMOD_CHANNELORDER_PROTOOLS = @enumToInt(enum_FMOD_CHANNELORDER._PROTOOLS);
pub const FMOD_CHANNELORDER_ALLMONO = @enumToInt(enum_FMOD_CHANNELORDER._ALLMONO);
pub const FMOD_CHANNELORDER_ALLSTEREO = @enumToInt(enum_FMOD_CHANNELORDER._ALLSTEREO);
pub const FMOD_CHANNELORDER_ALSA = @enumToInt(enum_FMOD_CHANNELORDER._ALSA);
pub const FMOD_CHANNELORDER_MAX = @enumToInt(enum_FMOD_CHANNELORDER._MAX);
pub const FMOD_CHANNELORDER_FORCEINT = @enumToInt(enum_FMOD_CHANNELORDER._FORCEINT);
pub const enum_FMOD_CHANNELORDER = extern enum(c_int) {
    _DEFAULT = 0,
    _WAVEFORMAT = 1,
    _PROTOOLS = 2,
    _ALLMONO = 3,
    _ALLSTEREO = 4,
    _ALSA = 5,
    _MAX = 6,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_CHANNELORDER = enum_FMOD_CHANNELORDER;
pub const FMOD_PLUGINTYPE_OUTPUT = @enumToInt(enum_FMOD_PLUGINTYPE._OUTPUT);
pub const FMOD_PLUGINTYPE_CODEC = @enumToInt(enum_FMOD_PLUGINTYPE._CODEC);
pub const FMOD_PLUGINTYPE_DSP = @enumToInt(enum_FMOD_PLUGINTYPE._DSP);
pub const FMOD_PLUGINTYPE_MAX = @enumToInt(enum_FMOD_PLUGINTYPE._MAX);
pub const FMOD_PLUGINTYPE_FORCEINT = @enumToInt(enum_FMOD_PLUGINTYPE._FORCEINT);
pub const enum_FMOD_PLUGINTYPE = extern enum(c_int) {
    _OUTPUT = 0,
    _CODEC = 1,
    _DSP = 2,
    _MAX = 3,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_PLUGINTYPE = enum_FMOD_PLUGINTYPE;
pub const FMOD_SOUND_TYPE_UNKNOWN = @enumToInt(enum_FMOD_SOUND_TYPE._UNKNOWN);
pub const FMOD_SOUND_TYPE_AIFF = @enumToInt(enum_FMOD_SOUND_TYPE._AIFF);
pub const FMOD_SOUND_TYPE_ASF = @enumToInt(enum_FMOD_SOUND_TYPE._ASF);
pub const FMOD_SOUND_TYPE_DLS = @enumToInt(enum_FMOD_SOUND_TYPE._DLS);
pub const FMOD_SOUND_TYPE_FLAC = @enumToInt(enum_FMOD_SOUND_TYPE._FLAC);
pub const FMOD_SOUND_TYPE_FSB = @enumToInt(enum_FMOD_SOUND_TYPE._FSB);
pub const FMOD_SOUND_TYPE_IT = @enumToInt(enum_FMOD_SOUND_TYPE._IT);
pub const FMOD_SOUND_TYPE_MIDI = @enumToInt(enum_FMOD_SOUND_TYPE._MIDI);
pub const FMOD_SOUND_TYPE_MOD = @enumToInt(enum_FMOD_SOUND_TYPE._MOD);
pub const FMOD_SOUND_TYPE_MPEG = @enumToInt(enum_FMOD_SOUND_TYPE._MPEG);
pub const FMOD_SOUND_TYPE_OGGVORBIS = @enumToInt(enum_FMOD_SOUND_TYPE._OGGVORBIS);
pub const FMOD_SOUND_TYPE_PLAYLIST = @enumToInt(enum_FMOD_SOUND_TYPE._PLAYLIST);
pub const FMOD_SOUND_TYPE_RAW = @enumToInt(enum_FMOD_SOUND_TYPE._RAW);
pub const FMOD_SOUND_TYPE_S3M = @enumToInt(enum_FMOD_SOUND_TYPE._S3M);
pub const FMOD_SOUND_TYPE_USER = @enumToInt(enum_FMOD_SOUND_TYPE._USER);
pub const FMOD_SOUND_TYPE_WAV = @enumToInt(enum_FMOD_SOUND_TYPE._WAV);
pub const FMOD_SOUND_TYPE_XM = @enumToInt(enum_FMOD_SOUND_TYPE._XM);
pub const FMOD_SOUND_TYPE_XMA = @enumToInt(enum_FMOD_SOUND_TYPE._XMA);
pub const FMOD_SOUND_TYPE_AUDIOQUEUE = @enumToInt(enum_FMOD_SOUND_TYPE._AUDIOQUEUE);
pub const FMOD_SOUND_TYPE_AT9 = @enumToInt(enum_FMOD_SOUND_TYPE._AT9);
pub const FMOD_SOUND_TYPE_VORBIS = @enumToInt(enum_FMOD_SOUND_TYPE._VORBIS);
pub const FMOD_SOUND_TYPE_MEDIA_FOUNDATION = @enumToInt(enum_FMOD_SOUND_TYPE._MEDIA_FOUNDATION);
pub const FMOD_SOUND_TYPE_MEDIACODEC = @enumToInt(enum_FMOD_SOUND_TYPE._MEDIACODEC);
pub const FMOD_SOUND_TYPE_FADPCM = @enumToInt(enum_FMOD_SOUND_TYPE._FADPCM);
pub const FMOD_SOUND_TYPE_OPUS = @enumToInt(enum_FMOD_SOUND_TYPE._OPUS);
pub const FMOD_SOUND_TYPE_MAX = @enumToInt(enum_FMOD_SOUND_TYPE._MAX);
pub const FMOD_SOUND_TYPE_FORCEINT = @enumToInt(enum_FMOD_SOUND_TYPE._FORCEINT);
pub const enum_FMOD_SOUND_TYPE = extern enum(c_int) {
    _UNKNOWN = 0,
    _AIFF = 1,
    _ASF = 2,
    _DLS = 3,
    _FLAC = 4,
    _FSB = 5,
    _IT = 6,
    _MIDI = 7,
    _MOD = 8,
    _MPEG = 9,
    _OGGVORBIS = 10,
    _PLAYLIST = 11,
    _RAW = 12,
    _S3M = 13,
    _USER = 14,
    _WAV = 15,
    _XM = 16,
    _XMA = 17,
    _AUDIOQUEUE = 18,
    _AT9 = 19,
    _VORBIS = 20,
    _MEDIA_FOUNDATION = 21,
    _MEDIACODEC = 22,
    _FADPCM = 23,
    _OPUS = 24,
    _MAX = 25,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_SOUND_TYPE = enum_FMOD_SOUND_TYPE;
pub const FMOD_SOUND_FORMAT_NONE = @enumToInt(enum_FMOD_SOUND_FORMAT._NONE);
pub const FMOD_SOUND_FORMAT_PCM8 = @enumToInt(enum_FMOD_SOUND_FORMAT._PCM8);
pub const FMOD_SOUND_FORMAT_PCM16 = @enumToInt(enum_FMOD_SOUND_FORMAT._PCM16);
pub const FMOD_SOUND_FORMAT_PCM24 = @enumToInt(enum_FMOD_SOUND_FORMAT._PCM24);
pub const FMOD_SOUND_FORMAT_PCM32 = @enumToInt(enum_FMOD_SOUND_FORMAT._PCM32);
pub const FMOD_SOUND_FORMAT_PCMFLOAT = @enumToInt(enum_FMOD_SOUND_FORMAT._PCMFLOAT);
pub const FMOD_SOUND_FORMAT_BITSTREAM = @enumToInt(enum_FMOD_SOUND_FORMAT._BITSTREAM);
pub const FMOD_SOUND_FORMAT_MAX = @enumToInt(enum_FMOD_SOUND_FORMAT._MAX);
pub const FMOD_SOUND_FORMAT_FORCEINT = @enumToInt(enum_FMOD_SOUND_FORMAT._FORCEINT);
pub const enum_FMOD_SOUND_FORMAT = extern enum(c_int) {
    _NONE = 0,
    _PCM8 = 1,
    _PCM16 = 2,
    _PCM24 = 3,
    _PCM32 = 4,
    _PCMFLOAT = 5,
    _BITSTREAM = 6,
    _MAX = 7,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_SOUND_FORMAT = enum_FMOD_SOUND_FORMAT;
pub const FMOD_OPENSTATE_READY = @enumToInt(enum_FMOD_OPENSTATE._READY);
pub const FMOD_OPENSTATE_LOADING = @enumToInt(enum_FMOD_OPENSTATE._LOADING);
pub const FMOD_OPENSTATE_ERROR = @enumToInt(enum_FMOD_OPENSTATE._ERROR);
pub const FMOD_OPENSTATE_CONNECTING = @enumToInt(enum_FMOD_OPENSTATE._CONNECTING);
pub const FMOD_OPENSTATE_BUFFERING = @enumToInt(enum_FMOD_OPENSTATE._BUFFERING);
pub const FMOD_OPENSTATE_SEEKING = @enumToInt(enum_FMOD_OPENSTATE._SEEKING);
pub const FMOD_OPENSTATE_PLAYING = @enumToInt(enum_FMOD_OPENSTATE._PLAYING);
pub const FMOD_OPENSTATE_SETPOSITION = @enumToInt(enum_FMOD_OPENSTATE._SETPOSITION);
pub const FMOD_OPENSTATE_MAX = @enumToInt(enum_FMOD_OPENSTATE._MAX);
pub const FMOD_OPENSTATE_FORCEINT = @enumToInt(enum_FMOD_OPENSTATE._FORCEINT);
pub const enum_FMOD_OPENSTATE = extern enum(c_int) {
    _READY = 0,
    _LOADING = 1,
    _ERROR = 2,
    _CONNECTING = 3,
    _BUFFERING = 4,
    _SEEKING = 5,
    _PLAYING = 6,
    _SETPOSITION = 7,
    _MAX = 8,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_OPENSTATE = enum_FMOD_OPENSTATE;
pub const FMOD_SOUNDGROUP_BEHAVIOR_FAIL = @enumToInt(enum_FMOD_SOUNDGROUP_BEHAVIOR._FAIL);
pub const FMOD_SOUNDGROUP_BEHAVIOR_MUTE = @enumToInt(enum_FMOD_SOUNDGROUP_BEHAVIOR._MUTE);
pub const FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST = @enumToInt(enum_FMOD_SOUNDGROUP_BEHAVIOR._STEALLOWEST);
pub const FMOD_SOUNDGROUP_BEHAVIOR_MAX = @enumToInt(enum_FMOD_SOUNDGROUP_BEHAVIOR._MAX);
pub const FMOD_SOUNDGROUP_BEHAVIOR_FORCEINT = @enumToInt(enum_FMOD_SOUNDGROUP_BEHAVIOR._FORCEINT);
pub const enum_FMOD_SOUNDGROUP_BEHAVIOR = extern enum(c_int) {
    _FAIL = 0,
    _MUTE = 1,
    _STEALLOWEST = 2,
    _MAX = 3,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_SOUNDGROUP_BEHAVIOR = enum_FMOD_SOUNDGROUP_BEHAVIOR;
pub const FMOD_CHANNELCONTROL_CALLBACK_END = @enumToInt(enum_FMOD_CHANNELCONTROL_CALLBACK_TYPE.FMOD_CHANNELCONTROL_CALLBACK_END);
pub const FMOD_CHANNELCONTROL_CALLBACK_VIRTUALVOICE = @enumToInt(enum_FMOD_CHANNELCONTROL_CALLBACK_TYPE.FMOD_CHANNELCONTROL_CALLBACK_VIRTUALVOICE);
pub const FMOD_CHANNELCONTROL_CALLBACK_SYNCPOINT = @enumToInt(enum_FMOD_CHANNELCONTROL_CALLBACK_TYPE.FMOD_CHANNELCONTROL_CALLBACK_SYNCPOINT);
pub const FMOD_CHANNELCONTROL_CALLBACK_OCCLUSION = @enumToInt(enum_FMOD_CHANNELCONTROL_CALLBACK_TYPE.FMOD_CHANNELCONTROL_CALLBACK_OCCLUSION);
pub const FMOD_CHANNELCONTROL_CALLBACK_MAX = @enumToInt(enum_FMOD_CHANNELCONTROL_CALLBACK_TYPE.FMOD_CHANNELCONTROL_CALLBACK_MAX);
pub const FMOD_CHANNELCONTROL_CALLBACK_FORCEINT = @enumToInt(enum_FMOD_CHANNELCONTROL_CALLBACK_TYPE.FMOD_CHANNELCONTROL_CALLBACK_FORCEINT);
pub const enum_FMOD_CHANNELCONTROL_CALLBACK_TYPE = extern enum(c_int) {
    FMOD_CHANNELCONTROL_CALLBACK_END = 0,
    FMOD_CHANNELCONTROL_CALLBACK_VIRTUALVOICE = 1,
    FMOD_CHANNELCONTROL_CALLBACK_SYNCPOINT = 2,
    FMOD_CHANNELCONTROL_CALLBACK_OCCLUSION = 3,
    FMOD_CHANNELCONTROL_CALLBACK_MAX = 4,
    FMOD_CHANNELCONTROL_CALLBACK_FORCEINT = 65536,
    _,
};
pub const FMOD_CHANNELCONTROL_CALLBACK_TYPE = enum_FMOD_CHANNELCONTROL_CALLBACK_TYPE;
pub const FMOD_CHANNELCONTROL_DSP_HEAD = @enumToInt(enum_FMOD_CHANNELCONTROL_DSP_INDEX.FMOD_CHANNELCONTROL_DSP_HEAD);
pub const FMOD_CHANNELCONTROL_DSP_FADER = @enumToInt(enum_FMOD_CHANNELCONTROL_DSP_INDEX.FMOD_CHANNELCONTROL_DSP_FADER);
pub const FMOD_CHANNELCONTROL_DSP_TAIL = @enumToInt(enum_FMOD_CHANNELCONTROL_DSP_INDEX.FMOD_CHANNELCONTROL_DSP_TAIL);
pub const FMOD_CHANNELCONTROL_DSP_FORCEINT = @enumToInt(enum_FMOD_CHANNELCONTROL_DSP_INDEX.FMOD_CHANNELCONTROL_DSP_FORCEINT);
pub const enum_FMOD_CHANNELCONTROL_DSP_INDEX = extern enum(c_int) {
    FMOD_CHANNELCONTROL_DSP_HEAD = -1,
    FMOD_CHANNELCONTROL_DSP_FADER = -2,
    FMOD_CHANNELCONTROL_DSP_TAIL = -3,
    FMOD_CHANNELCONTROL_DSP_FORCEINT = 65536,
    _,
};
pub const FMOD_CHANNELCONTROL_DSP_INDEX = enum_FMOD_CHANNELCONTROL_DSP_INDEX;
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_NONE = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._NONE);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_SYSTEM = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._SYSTEM);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNEL = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._CHANNEL);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELGROUP = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._CHANNELGROUP);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELCONTROL = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._CHANNELCONTROL);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_SOUND = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._SOUND);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_SOUNDGROUP = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._SOUNDGROUP);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_DSP = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._DSP);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_DSPCONNECTION = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._DSPCONNECTION);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_GEOMETRY = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._GEOMETRY);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_REVERB3D = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._REVERB3D);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_SYSTEM = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._STUDIO_SYSTEM);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTDESCRIPTION = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._STUDIO_EVENTDESCRIPTION);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTINSTANCE = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._STUDIO_EVENTINSTANCE);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_PARAMETERINSTANCE = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._STUDIO_PARAMETERINSTANCE);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BUS = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._STUDIO_BUS);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_VCA = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._STUDIO_VCA);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BANK = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._STUDIO_BANK);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_COMMANDREPLAY = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._STUDIO_COMMANDREPLAY);
pub const FMOD_ERRORCALLBACK_INSTANCETYPE_FORCEINT = @enumToInt(enum_FMOD_ERRORCALLBACK_INSTANCETYPE._FORCEINT);
pub const enum_FMOD_ERRORCALLBACK_INSTANCETYPE = extern enum(c_int) {
    _NONE = 0,
    _SYSTEM = 1,
    _CHANNEL = 2,
    _CHANNELGROUP = 3,
    _CHANNELCONTROL = 4,
    _SOUND = 5,
    _SOUNDGROUP = 6,
    _DSP = 7,
    _DSPCONNECTION = 8,
    _GEOMETRY = 9,
    _REVERB3D = 10,
    _STUDIO_SYSTEM = 11,
    _STUDIO_EVENTDESCRIPTION = 12,
    _STUDIO_EVENTINSTANCE = 13,
    _STUDIO_PARAMETERINSTANCE = 14,
    _STUDIO_BUS = 15,
    _STUDIO_VCA = 16,
    _STUDIO_BANK = 17,
    _STUDIO_COMMANDREPLAY = 18,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_ERRORCALLBACK_INSTANCETYPE = enum_FMOD_ERRORCALLBACK_INSTANCETYPE;
pub const FMOD_DSP_RESAMPLER_DEFAULT = @enumToInt(enum_FMOD_DSP_RESAMPLER._DEFAULT);
pub const FMOD_DSP_RESAMPLER_NOINTERP = @enumToInt(enum_FMOD_DSP_RESAMPLER._NOINTERP);
pub const FMOD_DSP_RESAMPLER_LINEAR = @enumToInt(enum_FMOD_DSP_RESAMPLER._LINEAR);
pub const FMOD_DSP_RESAMPLER_CUBIC = @enumToInt(enum_FMOD_DSP_RESAMPLER._CUBIC);
pub const FMOD_DSP_RESAMPLER_SPLINE = @enumToInt(enum_FMOD_DSP_RESAMPLER._SPLINE);
pub const FMOD_DSP_RESAMPLER_MAX = @enumToInt(enum_FMOD_DSP_RESAMPLER._MAX);
pub const FMOD_DSP_RESAMPLER_FORCEINT = @enumToInt(enum_FMOD_DSP_RESAMPLER._FORCEINT);
pub const enum_FMOD_DSP_RESAMPLER = extern enum(c_int) {
    _DEFAULT = 0,
    _NOINTERP = 1,
    _LINEAR = 2,
    _CUBIC = 3,
    _SPLINE = 4,
    _MAX = 5,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_DSP_RESAMPLER = enum_FMOD_DSP_RESAMPLER;
pub const FMOD_DSPCONNECTION_TYPE_STANDARD = @enumToInt(enum_FMOD_DSPCONNECTION_TYPE._STANDARD);
pub const FMOD_DSPCONNECTION_TYPE_SIDECHAIN = @enumToInt(enum_FMOD_DSPCONNECTION_TYPE._SIDECHAIN);
pub const FMOD_DSPCONNECTION_TYPE_SEND = @enumToInt(enum_FMOD_DSPCONNECTION_TYPE._SEND);
pub const FMOD_DSPCONNECTION_TYPE_SEND_SIDECHAIN = @enumToInt(enum_FMOD_DSPCONNECTION_TYPE._SEND_SIDECHAIN);
pub const FMOD_DSPCONNECTION_TYPE_MAX = @enumToInt(enum_FMOD_DSPCONNECTION_TYPE._MAX);
pub const FMOD_DSPCONNECTION_TYPE_FORCEINT = @enumToInt(enum_FMOD_DSPCONNECTION_TYPE._FORCEINT);
pub const enum_FMOD_DSPCONNECTION_TYPE = extern enum(c_int) {
    _STANDARD = 0,
    _SIDECHAIN = 1,
    _SEND = 2,
    _SEND_SIDECHAIN = 3,
    _MAX = 4,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_DSPCONNECTION_TYPE = enum_FMOD_DSPCONNECTION_TYPE;
pub const FMOD_TAGTYPE_UNKNOWN = @enumToInt(enum_FMOD_TAGTYPE._UNKNOWN);
pub const FMOD_TAGTYPE_ID3V1 = @enumToInt(enum_FMOD_TAGTYPE._ID3V1);
pub const FMOD_TAGTYPE_ID3V2 = @enumToInt(enum_FMOD_TAGTYPE._ID3V2);
pub const FMOD_TAGTYPE_VORBISCOMMENT = @enumToInt(enum_FMOD_TAGTYPE._VORBISCOMMENT);
pub const FMOD_TAGTYPE_SHOUTCAST = @enumToInt(enum_FMOD_TAGTYPE._SHOUTCAST);
pub const FMOD_TAGTYPE_ICECAST = @enumToInt(enum_FMOD_TAGTYPE._ICECAST);
pub const FMOD_TAGTYPE_ASF = @enumToInt(enum_FMOD_TAGTYPE._ASF);
pub const FMOD_TAGTYPE_MIDI = @enumToInt(enum_FMOD_TAGTYPE._MIDI);
pub const FMOD_TAGTYPE_PLAYLIST = @enumToInt(enum_FMOD_TAGTYPE._PLAYLIST);
pub const FMOD_TAGTYPE_FMOD = @enumToInt(enum_FMOD_TAGTYPE._FMOD);
pub const FMOD_TAGTYPE_USER = @enumToInt(enum_FMOD_TAGTYPE._USER);
pub const FMOD_TAGTYPE_MAX = @enumToInt(enum_FMOD_TAGTYPE._MAX);
pub const FMOD_TAGTYPE_FORCEINT = @enumToInt(enum_FMOD_TAGTYPE._FORCEINT);
pub const enum_FMOD_TAGTYPE = extern enum(c_int) {
    _UNKNOWN = 0,
    _ID3V1 = 1,
    _ID3V2 = 2,
    _VORBISCOMMENT = 3,
    _SHOUTCAST = 4,
    _ICECAST = 5,
    _ASF = 6,
    _MIDI = 7,
    _PLAYLIST = 8,
    _FMOD = 9,
    _USER = 10,
    _MAX = 11,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_TAGTYPE = enum_FMOD_TAGTYPE;
pub const FMOD_TAGDATATYPE_BINARY = @enumToInt(enum_FMOD_TAGDATATYPE._BINARY);
pub const FMOD_TAGDATATYPE_INT = @enumToInt(enum_FMOD_TAGDATATYPE._INT);
pub const FMOD_TAGDATATYPE_FLOAT = @enumToInt(enum_FMOD_TAGDATATYPE._FLOAT);
pub const FMOD_TAGDATATYPE_STRING = @enumToInt(enum_FMOD_TAGDATATYPE._STRING);
pub const FMOD_TAGDATATYPE_STRING_UTF16 = @enumToInt(enum_FMOD_TAGDATATYPE._STRING_UTF16);
pub const FMOD_TAGDATATYPE_STRING_UTF16BE = @enumToInt(enum_FMOD_TAGDATATYPE._STRING_UTF16BE);
pub const FMOD_TAGDATATYPE_STRING_UTF8 = @enumToInt(enum_FMOD_TAGDATATYPE._STRING_UTF8);
pub const FMOD_TAGDATATYPE_MAX = @enumToInt(enum_FMOD_TAGDATATYPE._MAX);
pub const FMOD_TAGDATATYPE_FORCEINT = @enumToInt(enum_FMOD_TAGDATATYPE._FORCEINT);
pub const enum_FMOD_TAGDATATYPE = extern enum(c_int) {
    _BINARY = 0,
    _INT = 1,
    _FLOAT = 2,
    _STRING = 3,
    _STRING_UTF16 = 4,
    _STRING_UTF16BE = 5,
    _STRING_UTF8 = 6,
    _MAX = 7,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_TAGDATATYPE = enum_FMOD_TAGDATATYPE;
pub const FMOD_DEBUG_CALLBACK = ?fn (FMOD_DEBUG_FLAGS, [*c]const u8, c_int, [*c]const u8, [*c]const u8) callconv(.C) FMOD_RESULT;
pub const FMOD_SYSTEM_CALLBACK = ?fn (?*FMOD_SYSTEM, FMOD_SYSTEM_CALLBACK_TYPE, ?*c_void, ?*c_void, ?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_CHANNELCONTROL_CALLBACK = ?fn (?*FMOD_CHANNELCONTROL, FMOD_CHANNELCONTROL_TYPE, FMOD_CHANNELCONTROL_CALLBACK_TYPE, ?*c_void, ?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_SOUND_NONBLOCK_CALLBACK = ?fn (?*FMOD_SOUND, FMOD_RESULT) callconv(.C) FMOD_RESULT;
pub const FMOD_SOUND_PCMREAD_CALLBACK = ?fn (?*FMOD_SOUND, ?*c_void, c_uint) callconv(.C) FMOD_RESULT;
pub const FMOD_SOUND_PCMSETPOS_CALLBACK = ?fn (?*FMOD_SOUND, c_int, c_uint, FMOD_TIMEUNIT) callconv(.C) FMOD_RESULT;
pub const FMOD_FILE_OPEN_CALLBACK = ?fn ([*c]const u8, [*c]c_uint, [*c]?*c_void, ?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_FILE_CLOSE_CALLBACK = ?fn (?*c_void, ?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_FILE_READ_CALLBACK = ?fn (?*c_void, ?*c_void, c_uint, [*c]c_uint, ?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_FILE_SEEK_CALLBACK = ?fn (?*c_void, c_uint, ?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_FILE_ASYNCREAD_CALLBACK = ?fn ([*c]FMOD_ASYNCREADINFO, ?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_FILE_ASYNCCANCEL_CALLBACK = ?fn ([*c]FMOD_ASYNCREADINFO, ?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_FILE_ASYNCDONE_FUNC = ?fn ([*c]FMOD_ASYNCREADINFO, FMOD_RESULT) callconv(.C) void;
pub const FMOD_MEMORY_ALLOC_CALLBACK = ?fn (c_uint, FMOD_MEMORY_TYPE, [*c]const u8) callconv(.C) ?*c_void;
pub const FMOD_MEMORY_REALLOC_CALLBACK = ?fn (?*c_void, c_uint, FMOD_MEMORY_TYPE, [*c]const u8) callconv(.C) ?*c_void;
pub const FMOD_MEMORY_FREE_CALLBACK = ?fn (?*c_void, FMOD_MEMORY_TYPE, [*c]const u8) callconv(.C) void;
pub const FMOD_3D_ROLLOFF_CALLBACK = ?fn (?*FMOD_CHANNELCONTROL, f32) callconv(.C) f32;
pub const struct_FMOD_VECTOR = extern struct {
    x: f32,
    y: f32,
    z: f32,
};
pub const FMOD_VECTOR = struct_FMOD_VECTOR;
pub const struct_FMOD_3D_ATTRIBUTES = extern struct {
    position: FMOD_VECTOR,
    velocity: FMOD_VECTOR,
    forward: FMOD_VECTOR,
    up: FMOD_VECTOR,
};
pub const FMOD_3D_ATTRIBUTES = struct_FMOD_3D_ATTRIBUTES;
pub const struct_FMOD_GUID = extern struct {
    Data1: c_uint,
    Data2: c_ushort,
    Data3: c_ushort,
    Data4: [8]u8,
};
pub const FMOD_GUID = struct_FMOD_GUID;
pub const struct_FMOD_PLUGINLIST = extern struct {
    type: FMOD_PLUGINTYPE,
    description: ?*c_void,
};
pub const FMOD_PLUGINLIST = struct_FMOD_PLUGINLIST;
pub const struct_FMOD_ADVANCEDSETTINGS = extern struct {
    cbSize: c_int,
    maxMPEGCodecs: c_int,
    maxADPCMCodecs: c_int,
    maxXMACodecs: c_int,
    maxVorbisCodecs: c_int,
    maxAT9Codecs: c_int,
    maxFADPCMCodecs: c_int,
    maxPCMCodecs: c_int,
    ASIONumChannels: c_int,
    ASIOChannelList: [*c][*c]u8,
    ASIOSpeakerList: [*c]FMOD_SPEAKER,
    vol0virtualvol: f32,
    defaultDecodeBufferSize: c_uint,
    profilePort: c_ushort,
    geometryMaxFadeTime: c_uint,
    distanceFilterCenterFreq: f32,
    reverb3Dinstance: c_int,
    DSPBufferPoolSize: c_int,
    resamplerMethod: FMOD_DSP_RESAMPLER,
    randomSeed: c_uint,
    maxConvolutionThreads: c_int,
};
pub const FMOD_ADVANCEDSETTINGS = struct_FMOD_ADVANCEDSETTINGS;
pub const struct_FMOD_TAG = extern struct {
    type: FMOD_TAGTYPE,
    datatype: FMOD_TAGDATATYPE,
    name: [*c]u8,
    data: ?*c_void,
    datalen: c_uint,
    updated: FMOD_BOOL,
};
pub const FMOD_TAG = struct_FMOD_TAG;
pub const struct_FMOD_CREATESOUNDEXINFO = extern struct {
    cbsize: c_int,
    length: c_uint,
    fileoffset: c_uint,
    numchannels: c_int,
    defaultfrequency: c_int,
    format: FMOD_SOUND_FORMAT,
    decodebuffersize: c_uint,
    initialsubsound: c_int,
    numsubsounds: c_int,
    inclusionlist: [*c]c_int,
    inclusionlistnum: c_int,
    pcmreadcallback: FMOD_SOUND_PCMREAD_CALLBACK,
    pcmsetposcallback: FMOD_SOUND_PCMSETPOS_CALLBACK,
    nonblockcallback: FMOD_SOUND_NONBLOCK_CALLBACK,
    dlsname: [*c]const u8,
    encryptionkey: [*c]const u8,
    maxpolyphony: c_int,
    userdata: ?*c_void,
    suggestedsoundtype: FMOD_SOUND_TYPE,
    fileuseropen: FMOD_FILE_OPEN_CALLBACK,
    fileuserclose: FMOD_FILE_CLOSE_CALLBACK,
    fileuserread: FMOD_FILE_READ_CALLBACK,
    fileuserseek: FMOD_FILE_SEEK_CALLBACK,
    fileuserasyncread: FMOD_FILE_ASYNCREAD_CALLBACK,
    fileuserasynccancel: FMOD_FILE_ASYNCCANCEL_CALLBACK,
    fileuserdata: ?*c_void,
    filebuffersize: c_int,
    channelorder: FMOD_CHANNELORDER,
    initialsoundgroup: ?*FMOD_SOUNDGROUP,
    initialseekposition: c_uint,
    initialseekpostype: FMOD_TIMEUNIT,
    ignoresetfilesystem: c_int,
    audioqueuepolicy: c_uint,
    minmidigranularity: c_uint,
    nonblockthreadid: c_int,
    fsbguid: [*c]FMOD_GUID,
};
pub const FMOD_CREATESOUNDEXINFO = struct_FMOD_CREATESOUNDEXINFO;
pub const struct_FMOD_REVERB_PROPERTIES = extern struct {
    DecayTime: f32,
    EarlyDelay: f32,
    LateDelay: f32,
    HFReference: f32,
    HFDecayRatio: f32,
    Diffusion: f32,
    Density: f32,
    LowShelfFrequency: f32,
    LowShelfGain: f32,
    HighCut: f32,
    EarlyLateMix: f32,
    WetLevel: f32,
};
pub const FMOD_REVERB_PROPERTIES = struct_FMOD_REVERB_PROPERTIES;
pub const struct_FMOD_ERRORCALLBACK_INFO = extern struct {
    result: FMOD_RESULT,
    instancetype: FMOD_ERRORCALLBACK_INSTANCETYPE,
    instance: ?*c_void,
    functionname: [*c]const u8,
    functionparams: [*c]const u8,
};
pub const FMOD_ERRORCALLBACK_INFO = struct_FMOD_ERRORCALLBACK_INFO;
pub const struct_FMOD_CODEC_STATE = extern struct {
    numsubsounds: c_int,
    waveformat: [*c]FMOD_CODEC_WAVEFORMAT,
    plugindata: ?*c_void,
    filehandle: ?*c_void,
    filesize: c_uint,
    fileread: FMOD_FILE_READ_CALLBACK,
    fileseek: FMOD_FILE_SEEK_CALLBACK,
    metadata: FMOD_CODEC_METADATA_CALLBACK,
    waveformatversion: c_int,
};
pub const FMOD_CODEC_STATE = struct_FMOD_CODEC_STATE;
pub const struct_FMOD_CODEC_WAVEFORMAT = extern struct {
    name: [*c]const u8,
    format: FMOD_SOUND_FORMAT,
    channels: c_int,
    frequency: c_int,
    lengthbytes: c_uint,
    lengthpcm: c_uint,
    pcmblocksize: c_uint,
    loopstart: c_int,
    loopend: c_int,
    mode: FMOD_MODE,
    channelmask: FMOD_CHANNELMASK,
    channelorder: FMOD_CHANNELORDER,
    peakvolume: f32,
};
pub const FMOD_CODEC_WAVEFORMAT = struct_FMOD_CODEC_WAVEFORMAT;
pub const FMOD_CODEC_OPEN_CALLBACK = ?fn ([*c]FMOD_CODEC_STATE, FMOD_MODE, [*c]FMOD_CREATESOUNDEXINFO) callconv(.C) FMOD_RESULT;
pub const FMOD_CODEC_CLOSE_CALLBACK = ?fn ([*c]FMOD_CODEC_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_CODEC_READ_CALLBACK = ?fn ([*c]FMOD_CODEC_STATE, ?*c_void, c_uint, [*c]c_uint) callconv(.C) FMOD_RESULT;
pub const FMOD_CODEC_GETLENGTH_CALLBACK = ?fn ([*c]FMOD_CODEC_STATE, [*c]c_uint, FMOD_TIMEUNIT) callconv(.C) FMOD_RESULT;
pub const FMOD_CODEC_SETPOSITION_CALLBACK = ?fn ([*c]FMOD_CODEC_STATE, c_int, c_uint, FMOD_TIMEUNIT) callconv(.C) FMOD_RESULT;
pub const FMOD_CODEC_GETPOSITION_CALLBACK = ?fn ([*c]FMOD_CODEC_STATE, [*c]c_uint, FMOD_TIMEUNIT) callconv(.C) FMOD_RESULT;
pub const FMOD_CODEC_SOUNDCREATE_CALLBACK = ?fn ([*c]FMOD_CODEC_STATE, c_int, ?*FMOD_SOUND) callconv(.C) FMOD_RESULT;
pub const FMOD_CODEC_METADATA_CALLBACK = ?fn ([*c]FMOD_CODEC_STATE, FMOD_TAGTYPE, [*c]u8, ?*c_void, c_uint, FMOD_TAGDATATYPE, c_int) callconv(.C) FMOD_RESULT;
pub const FMOD_CODEC_GETWAVEFORMAT_CALLBACK = ?fn ([*c]FMOD_CODEC_STATE, c_int, [*c]FMOD_CODEC_WAVEFORMAT) callconv(.C) FMOD_RESULT;
pub const struct_FMOD_CODEC_DESCRIPTION = extern struct {
    name: [*c]const u8,
    version: c_uint,
    defaultasstream: c_int,
    timeunits: FMOD_TIMEUNIT,
    open: FMOD_CODEC_OPEN_CALLBACK,
    close: FMOD_CODEC_CLOSE_CALLBACK,
    read: FMOD_CODEC_READ_CALLBACK,
    getlength: FMOD_CODEC_GETLENGTH_CALLBACK,
    setposition: FMOD_CODEC_SETPOSITION_CALLBACK,
    getposition: FMOD_CODEC_GETPOSITION_CALLBACK,
    soundcreate: FMOD_CODEC_SOUNDCREATE_CALLBACK,
    getwaveformat: FMOD_CODEC_GETWAVEFORMAT_CALLBACK,
};
pub const FMOD_CODEC_DESCRIPTION = struct_FMOD_CODEC_DESCRIPTION;
pub const FMOD_DSP_TYPE_UNKNOWN = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_UNKNOWN);
pub const FMOD_DSP_TYPE_MIXER = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_MIXER);
pub const FMOD_DSP_TYPE_OSCILLATOR = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_OSCILLATOR);
pub const FMOD_DSP_TYPE_LOWPASS = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_LOWPASS);
pub const FMOD_DSP_TYPE_ITLOWPASS = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_ITLOWPASS);
pub const FMOD_DSP_TYPE_HIGHPASS = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_HIGHPASS);
pub const FMOD_DSP_TYPE_ECHO = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_ECHO);
pub const FMOD_DSP_TYPE_FADER = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_FADER);
pub const FMOD_DSP_TYPE_FLANGE = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_FLANGE);
pub const FMOD_DSP_TYPE_DISTORTION = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_DISTORTION);
pub const FMOD_DSP_TYPE_NORMALIZE = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_NORMALIZE);
pub const FMOD_DSP_TYPE_LIMITER = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_LIMITER);
pub const FMOD_DSP_TYPE_PARAMEQ = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_PARAMEQ);
pub const FMOD_DSP_TYPE_PITCHSHIFT = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_PITCHSHIFT);
pub const FMOD_DSP_TYPE_CHORUS = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_CHORUS);
pub const FMOD_DSP_TYPE_VSTPLUGIN = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_VSTPLUGIN);
pub const FMOD_DSP_TYPE_WINAMPPLUGIN = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_WINAMPPLUGIN);
pub const FMOD_DSP_TYPE_ITECHO = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_ITECHO);
pub const FMOD_DSP_TYPE_COMPRESSOR = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_COMPRESSOR);
pub const FMOD_DSP_TYPE_SFXREVERB = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_SFXREVERB);
pub const FMOD_DSP_TYPE_LOWPASS_SIMPLE = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_LOWPASS_SIMPLE);
pub const FMOD_DSP_TYPE_DELAY = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_DELAY);
pub const FMOD_DSP_TYPE_TREMOLO = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_TREMOLO);
pub const FMOD_DSP_TYPE_LADSPAPLUGIN = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_LADSPAPLUGIN);
pub const FMOD_DSP_TYPE_SEND = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_SEND);
pub const FMOD_DSP_TYPE_RETURN = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_RETURN);
pub const FMOD_DSP_TYPE_HIGHPASS_SIMPLE = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_HIGHPASS_SIMPLE);
pub const FMOD_DSP_TYPE_PAN = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_PAN);
pub const FMOD_DSP_TYPE_THREE_EQ = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_THREE_EQ);
pub const FMOD_DSP_TYPE_FFT = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_FFT);
pub const FMOD_DSP_TYPE_LOUDNESS_METER = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_LOUDNESS_METER);
pub const FMOD_DSP_TYPE_ENVELOPEFOLLOWER = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_ENVELOPEFOLLOWER);
pub const FMOD_DSP_TYPE_CONVOLUTIONREVERB = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_CONVOLUTIONREVERB);
pub const FMOD_DSP_TYPE_CHANNELMIX = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_CHANNELMIX);
pub const FMOD_DSP_TYPE_TRANSCEIVER = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_TRANSCEIVER);
pub const FMOD_DSP_TYPE_OBJECTPAN = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_OBJECTPAN);
pub const FMOD_DSP_TYPE_MULTIBAND_EQ = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_MULTIBAND_EQ);
pub const FMOD_DSP_TYPE_MAX = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_MAX);
pub const FMOD_DSP_TYPE_FORCEINT = @enumToInt(enum_unnamed_1.FMOD_DSP_TYPE_FORCEINT);
const enum_unnamed_1 = extern enum(c_int) {
    FMOD_DSP_TYPE_UNKNOWN = 0,
    FMOD_DSP_TYPE_MIXER = 1,
    FMOD_DSP_TYPE_OSCILLATOR = 2,
    FMOD_DSP_TYPE_LOWPASS = 3,
    FMOD_DSP_TYPE_ITLOWPASS = 4,
    FMOD_DSP_TYPE_HIGHPASS = 5,
    FMOD_DSP_TYPE_ECHO = 6,
    FMOD_DSP_TYPE_FADER = 7,
    FMOD_DSP_TYPE_FLANGE = 8,
    FMOD_DSP_TYPE_DISTORTION = 9,
    FMOD_DSP_TYPE_NORMALIZE = 10,
    FMOD_DSP_TYPE_LIMITER = 11,
    FMOD_DSP_TYPE_PARAMEQ = 12,
    FMOD_DSP_TYPE_PITCHSHIFT = 13,
    FMOD_DSP_TYPE_CHORUS = 14,
    FMOD_DSP_TYPE_VSTPLUGIN = 15,
    FMOD_DSP_TYPE_WINAMPPLUGIN = 16,
    FMOD_DSP_TYPE_ITECHO = 17,
    FMOD_DSP_TYPE_COMPRESSOR = 18,
    FMOD_DSP_TYPE_SFXREVERB = 19,
    FMOD_DSP_TYPE_LOWPASS_SIMPLE = 20,
    FMOD_DSP_TYPE_DELAY = 21,
    FMOD_DSP_TYPE_TREMOLO = 22,
    FMOD_DSP_TYPE_LADSPAPLUGIN = 23,
    FMOD_DSP_TYPE_SEND = 24,
    FMOD_DSP_TYPE_RETURN = 25,
    FMOD_DSP_TYPE_HIGHPASS_SIMPLE = 26,
    FMOD_DSP_TYPE_PAN = 27,
    FMOD_DSP_TYPE_THREE_EQ = 28,
    FMOD_DSP_TYPE_FFT = 29,
    FMOD_DSP_TYPE_LOUDNESS_METER = 30,
    FMOD_DSP_TYPE_ENVELOPEFOLLOWER = 31,
    FMOD_DSP_TYPE_CONVOLUTIONREVERB = 32,
    FMOD_DSP_TYPE_CHANNELMIX = 33,
    FMOD_DSP_TYPE_TRANSCEIVER = 34,
    FMOD_DSP_TYPE_OBJECTPAN = 35,
    FMOD_DSP_TYPE_MULTIBAND_EQ = 36,
    FMOD_DSP_TYPE_MAX = 37,
    FMOD_DSP_TYPE_FORCEINT = 65536,
    _,
};
pub const FMOD_DSP_TYPE = enum_unnamed_1;
pub const FMOD_DSP_OSCILLATOR_TYPE = @enumToInt(enum_unnamed_2.FMOD_DSP_OSCILLATOR_TYPE);
pub const FMOD_DSP_OSCILLATOR_RATE = @enumToInt(enum_unnamed_2.FMOD_DSP_OSCILLATOR_RATE);
const enum_unnamed_2 = extern enum(c_int) {
    FMOD_DSP_OSCILLATOR_TYPE,
    FMOD_DSP_OSCILLATOR_RATE,
    _,
};
pub const FMOD_DSP_OSCILLATOR = enum_unnamed_2;
pub const FMOD_DSP_LOWPASS_CUTOFF = @enumToInt(enum_unnamed_3.FMOD_DSP_LOWPASS_CUTOFF);
pub const FMOD_DSP_LOWPASS_RESONANCE = @enumToInt(enum_unnamed_3.FMOD_DSP_LOWPASS_RESONANCE);
const enum_unnamed_3 = extern enum(c_int) {
    FMOD_DSP_LOWPASS_CUTOFF,
    FMOD_DSP_LOWPASS_RESONANCE,
    _,
};
pub const FMOD_DSP_LOWPASS = enum_unnamed_3;
pub const FMOD_DSP_ITLOWPASS_CUTOFF = @enumToInt(enum_unnamed_4.FMOD_DSP_ITLOWPASS_CUTOFF);
pub const FMOD_DSP_ITLOWPASS_RESONANCE = @enumToInt(enum_unnamed_4.FMOD_DSP_ITLOWPASS_RESONANCE);
const enum_unnamed_4 = extern enum(c_int) {
    FMOD_DSP_ITLOWPASS_CUTOFF,
    FMOD_DSP_ITLOWPASS_RESONANCE,
    _,
};
pub const FMOD_DSP_ITLOWPASS = enum_unnamed_4;
pub const FMOD_DSP_HIGHPASS_CUTOFF = @enumToInt(enum_unnamed_5.FMOD_DSP_HIGHPASS_CUTOFF);
pub const FMOD_DSP_HIGHPASS_RESONANCE = @enumToInt(enum_unnamed_5.FMOD_DSP_HIGHPASS_RESONANCE);
const enum_unnamed_5 = extern enum(c_int) {
    FMOD_DSP_HIGHPASS_CUTOFF,
    FMOD_DSP_HIGHPASS_RESONANCE,
    _,
};
pub const FMOD_DSP_HIGHPASS = enum_unnamed_5;
pub const FMOD_DSP_ECHO_DELAY = @enumToInt(enum_unnamed_6.FMOD_DSP_ECHO_DELAY);
pub const FMOD_DSP_ECHO_FEEDBACK = @enumToInt(enum_unnamed_6.FMOD_DSP_ECHO_FEEDBACK);
pub const FMOD_DSP_ECHO_DRYLEVEL = @enumToInt(enum_unnamed_6.FMOD_DSP_ECHO_DRYLEVEL);
pub const FMOD_DSP_ECHO_WETLEVEL = @enumToInt(enum_unnamed_6.FMOD_DSP_ECHO_WETLEVEL);
const enum_unnamed_6 = extern enum(c_int) {
    FMOD_DSP_ECHO_DELAY,
    FMOD_DSP_ECHO_FEEDBACK,
    FMOD_DSP_ECHO_DRYLEVEL,
    FMOD_DSP_ECHO_WETLEVEL,
    _,
};
pub const FMOD_DSP_ECHO = enum_unnamed_6;
pub const FMOD_DSP_FADER_GAIN = @enumToInt(enum_FMOD_DSP_FADER._GAIN);
pub const FMOD_DSP_FADER_OVERALL_GAIN = @enumToInt(enum_FMOD_DSP_FADER._OVERALL_GAIN);
pub const enum_FMOD_DSP_FADER = extern enum(c_int) {
    _GAIN,
    _OVERALL_GAIN,
    _,
};
pub const FMOD_DSP_FADER = enum_FMOD_DSP_FADER;
pub const FMOD_DSP_FLANGE_MIX = @enumToInt(enum_unnamed_7.FMOD_DSP_FLANGE_MIX);
pub const FMOD_DSP_FLANGE_DEPTH = @enumToInt(enum_unnamed_7.FMOD_DSP_FLANGE_DEPTH);
pub const FMOD_DSP_FLANGE_RATE = @enumToInt(enum_unnamed_7.FMOD_DSP_FLANGE_RATE);
const enum_unnamed_7 = extern enum(c_int) {
    FMOD_DSP_FLANGE_MIX,
    FMOD_DSP_FLANGE_DEPTH,
    FMOD_DSP_FLANGE_RATE,
    _,
};
pub const FMOD_DSP_FLANGE = enum_unnamed_7;
pub const FMOD_DSP_DISTORTION_LEVEL = @enumToInt(enum_unnamed_8.FMOD_DSP_DISTORTION_LEVEL);
const enum_unnamed_8 = extern enum(c_int) {
    FMOD_DSP_DISTORTION_LEVEL,
    _,
};
pub const FMOD_DSP_DISTORTION = enum_unnamed_8;
pub const FMOD_DSP_NORMALIZE_FADETIME = @enumToInt(enum_unnamed_9.FMOD_DSP_NORMALIZE_FADETIME);
pub const FMOD_DSP_NORMALIZE_THRESHHOLD = @enumToInt(enum_unnamed_9.FMOD_DSP_NORMALIZE_THRESHHOLD);
pub const FMOD_DSP_NORMALIZE_MAXAMP = @enumToInt(enum_unnamed_9.FMOD_DSP_NORMALIZE_MAXAMP);
const enum_unnamed_9 = extern enum(c_int) {
    FMOD_DSP_NORMALIZE_FADETIME,
    FMOD_DSP_NORMALIZE_THRESHHOLD,
    FMOD_DSP_NORMALIZE_MAXAMP,
    _,
};
pub const FMOD_DSP_NORMALIZE = enum_unnamed_9;
pub const FMOD_DSP_LIMITER_RELEASETIME = @enumToInt(enum_unnamed_10.FMOD_DSP_LIMITER_RELEASETIME);
pub const FMOD_DSP_LIMITER_CEILING = @enumToInt(enum_unnamed_10.FMOD_DSP_LIMITER_CEILING);
pub const FMOD_DSP_LIMITER_MAXIMIZERGAIN = @enumToInt(enum_unnamed_10.FMOD_DSP_LIMITER_MAXIMIZERGAIN);
pub const FMOD_DSP_LIMITER_MODE = @enumToInt(enum_unnamed_10.FMOD_DSP_LIMITER_MODE);
const enum_unnamed_10 = extern enum(c_int) {
    FMOD_DSP_LIMITER_RELEASETIME,
    FMOD_DSP_LIMITER_CEILING,
    FMOD_DSP_LIMITER_MAXIMIZERGAIN,
    FMOD_DSP_LIMITER_MODE,
    _,
};
pub const FMOD_DSP_LIMITER = enum_unnamed_10;
pub const FMOD_DSP_PARAMEQ_CENTER = @enumToInt(enum_unnamed_11.FMOD_DSP_PARAMEQ_CENTER);
pub const FMOD_DSP_PARAMEQ_BANDWIDTH = @enumToInt(enum_unnamed_11.FMOD_DSP_PARAMEQ_BANDWIDTH);
pub const FMOD_DSP_PARAMEQ_GAIN = @enumToInt(enum_unnamed_11.FMOD_DSP_PARAMEQ_GAIN);
const enum_unnamed_11 = extern enum(c_int) {
    FMOD_DSP_PARAMEQ_CENTER,
    FMOD_DSP_PARAMEQ_BANDWIDTH,
    FMOD_DSP_PARAMEQ_GAIN,
    _,
};
pub const FMOD_DSP_PARAMEQ = enum_unnamed_11;
pub const FMOD_DSP_MULTIBAND_EQ_A_FILTER = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._A_FILTER);
pub const FMOD_DSP_MULTIBAND_EQ_A_FREQUENCY = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._A_FREQUENCY);
pub const FMOD_DSP_MULTIBAND_EQ_A_Q = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._A_Q);
pub const FMOD_DSP_MULTIBAND_EQ_A_GAIN = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._A_GAIN);
pub const FMOD_DSP_MULTIBAND_EQ_B_FILTER = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._B_FILTER);
pub const FMOD_DSP_MULTIBAND_EQ_B_FREQUENCY = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._B_FREQUENCY);
pub const FMOD_DSP_MULTIBAND_EQ_B_Q = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._B_Q);
pub const FMOD_DSP_MULTIBAND_EQ_B_GAIN = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._B_GAIN);
pub const FMOD_DSP_MULTIBAND_EQ_C_FILTER = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._C_FILTER);
pub const FMOD_DSP_MULTIBAND_EQ_C_FREQUENCY = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._C_FREQUENCY);
pub const FMOD_DSP_MULTIBAND_EQ_C_Q = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._C_Q);
pub const FMOD_DSP_MULTIBAND_EQ_C_GAIN = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._C_GAIN);
pub const FMOD_DSP_MULTIBAND_EQ_D_FILTER = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._D_FILTER);
pub const FMOD_DSP_MULTIBAND_EQ_D_FREQUENCY = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._D_FREQUENCY);
pub const FMOD_DSP_MULTIBAND_EQ_D_Q = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._D_Q);
pub const FMOD_DSP_MULTIBAND_EQ_D_GAIN = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._D_GAIN);
pub const FMOD_DSP_MULTIBAND_EQ_E_FILTER = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._E_FILTER);
pub const FMOD_DSP_MULTIBAND_EQ_E_FREQUENCY = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._E_FREQUENCY);
pub const FMOD_DSP_MULTIBAND_EQ_E_Q = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._E_Q);
pub const FMOD_DSP_MULTIBAND_EQ_E_GAIN = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ._E_GAIN);
pub const enum_FMOD_DSP_MULTIBAND_EQ = extern enum(c_int) {
    _A_FILTER,
    _A_FREQUENCY,
    _A_Q,
    _A_GAIN,
    _B_FILTER,
    _B_FREQUENCY,
    _B_Q,
    _B_GAIN,
    _C_FILTER,
    _C_FREQUENCY,
    _C_Q,
    _C_GAIN,
    _D_FILTER,
    _D_FREQUENCY,
    _D_Q,
    _D_GAIN,
    _E_FILTER,
    _E_FREQUENCY,
    _E_Q,
    _E_GAIN,
    _,
};
pub const FMOD_DSP_MULTIBAND_EQ = enum_FMOD_DSP_MULTIBAND_EQ;
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_DISABLED = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_DISABLED);
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_12DB = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_12DB);
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_24DB = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_24DB);
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_48DB = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_48DB);
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_12DB = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_12DB);
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_24DB = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_24DB);
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_48DB = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_48DB);
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_LOWSHELF = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_LOWSHELF);
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHSHELF = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHSHELF);
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_PEAKING = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_PEAKING);
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_BANDPASS = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_BANDPASS);
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_NOTCH = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_NOTCH);
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_ALLPASS = @enumToInt(enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE.FMOD_DSP_MULTIBAND_EQ_FILTER_ALLPASS);
pub const enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = extern enum(c_int) {
    FMOD_DSP_MULTIBAND_EQ_FILTER_DISABLED,
    FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_12DB,
    FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_24DB,
    FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_48DB,
    FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_12DB,
    FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_24DB,
    FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_48DB,
    FMOD_DSP_MULTIBAND_EQ_FILTER_LOWSHELF,
    FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHSHELF,
    FMOD_DSP_MULTIBAND_EQ_FILTER_PEAKING,
    FMOD_DSP_MULTIBAND_EQ_FILTER_BANDPASS,
    FMOD_DSP_MULTIBAND_EQ_FILTER_NOTCH,
    FMOD_DSP_MULTIBAND_EQ_FILTER_ALLPASS,
    _,
};
pub const FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE = enum_FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE;
pub const FMOD_DSP_PITCHSHIFT_PITCH = @enumToInt(enum_unnamed_12.FMOD_DSP_PITCHSHIFT_PITCH);
pub const FMOD_DSP_PITCHSHIFT_FFTSIZE = @enumToInt(enum_unnamed_12.FMOD_DSP_PITCHSHIFT_FFTSIZE);
pub const FMOD_DSP_PITCHSHIFT_OVERLAP = @enumToInt(enum_unnamed_12.FMOD_DSP_PITCHSHIFT_OVERLAP);
pub const FMOD_DSP_PITCHSHIFT_MAXCHANNELS = @enumToInt(enum_unnamed_12.FMOD_DSP_PITCHSHIFT_MAXCHANNELS);
const enum_unnamed_12 = extern enum(c_int) {
    FMOD_DSP_PITCHSHIFT_PITCH,
    FMOD_DSP_PITCHSHIFT_FFTSIZE,
    FMOD_DSP_PITCHSHIFT_OVERLAP,
    FMOD_DSP_PITCHSHIFT_MAXCHANNELS,
    _,
};
pub const FMOD_DSP_PITCHSHIFT = enum_unnamed_12;
pub const FMOD_DSP_CHORUS_MIX = @enumToInt(enum_unnamed_13.FMOD_DSP_CHORUS_MIX);
pub const FMOD_DSP_CHORUS_RATE = @enumToInt(enum_unnamed_13.FMOD_DSP_CHORUS_RATE);
pub const FMOD_DSP_CHORUS_DEPTH = @enumToInt(enum_unnamed_13.FMOD_DSP_CHORUS_DEPTH);
const enum_unnamed_13 = extern enum(c_int) {
    FMOD_DSP_CHORUS_MIX,
    FMOD_DSP_CHORUS_RATE,
    FMOD_DSP_CHORUS_DEPTH,
    _,
};
pub const FMOD_DSP_CHORUS = enum_unnamed_13;
pub const FMOD_DSP_ITECHO_WETDRYMIX = @enumToInt(enum_unnamed_14.FMOD_DSP_ITECHO_WETDRYMIX);
pub const FMOD_DSP_ITECHO_FEEDBACK = @enumToInt(enum_unnamed_14.FMOD_DSP_ITECHO_FEEDBACK);
pub const FMOD_DSP_ITECHO_LEFTDELAY = @enumToInt(enum_unnamed_14.FMOD_DSP_ITECHO_LEFTDELAY);
pub const FMOD_DSP_ITECHO_RIGHTDELAY = @enumToInt(enum_unnamed_14.FMOD_DSP_ITECHO_RIGHTDELAY);
pub const FMOD_DSP_ITECHO_PANDELAY = @enumToInt(enum_unnamed_14.FMOD_DSP_ITECHO_PANDELAY);
const enum_unnamed_14 = extern enum(c_int) {
    FMOD_DSP_ITECHO_WETDRYMIX,
    FMOD_DSP_ITECHO_FEEDBACK,
    FMOD_DSP_ITECHO_LEFTDELAY,
    FMOD_DSP_ITECHO_RIGHTDELAY,
    FMOD_DSP_ITECHO_PANDELAY,
    _,
};
pub const FMOD_DSP_ITECHO = enum_unnamed_14;
pub const FMOD_DSP_COMPRESSOR_THRESHOLD = @enumToInt(enum_unnamed_15.FMOD_DSP_COMPRESSOR_THRESHOLD);
pub const FMOD_DSP_COMPRESSOR_RATIO = @enumToInt(enum_unnamed_15.FMOD_DSP_COMPRESSOR_RATIO);
pub const FMOD_DSP_COMPRESSOR_ATTACK = @enumToInt(enum_unnamed_15.FMOD_DSP_COMPRESSOR_ATTACK);
pub const FMOD_DSP_COMPRESSOR_RELEASE = @enumToInt(enum_unnamed_15.FMOD_DSP_COMPRESSOR_RELEASE);
pub const FMOD_DSP_COMPRESSOR_GAINMAKEUP = @enumToInt(enum_unnamed_15.FMOD_DSP_COMPRESSOR_GAINMAKEUP);
pub const FMOD_DSP_COMPRESSOR_USESIDECHAIN = @enumToInt(enum_unnamed_15.FMOD_DSP_COMPRESSOR_USESIDECHAIN);
pub const FMOD_DSP_COMPRESSOR_LINKED = @enumToInt(enum_unnamed_15.FMOD_DSP_COMPRESSOR_LINKED);
const enum_unnamed_15 = extern enum(c_int) {
    FMOD_DSP_COMPRESSOR_THRESHOLD,
    FMOD_DSP_COMPRESSOR_RATIO,
    FMOD_DSP_COMPRESSOR_ATTACK,
    FMOD_DSP_COMPRESSOR_RELEASE,
    FMOD_DSP_COMPRESSOR_GAINMAKEUP,
    FMOD_DSP_COMPRESSOR_USESIDECHAIN,
    FMOD_DSP_COMPRESSOR_LINKED,
    _,
};
pub const FMOD_DSP_COMPRESSOR = enum_unnamed_15;
pub const FMOD_DSP_SFXREVERB_DECAYTIME = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_DECAYTIME);
pub const FMOD_DSP_SFXREVERB_EARLYDELAY = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_EARLYDELAY);
pub const FMOD_DSP_SFXREVERB_LATEDELAY = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_LATEDELAY);
pub const FMOD_DSP_SFXREVERB_HFREFERENCE = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_HFREFERENCE);
pub const FMOD_DSP_SFXREVERB_HFDECAYRATIO = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_HFDECAYRATIO);
pub const FMOD_DSP_SFXREVERB_DIFFUSION = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_DIFFUSION);
pub const FMOD_DSP_SFXREVERB_DENSITY = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_DENSITY);
pub const FMOD_DSP_SFXREVERB_LOWSHELFFREQUENCY = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_LOWSHELFFREQUENCY);
pub const FMOD_DSP_SFXREVERB_LOWSHELFGAIN = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_LOWSHELFGAIN);
pub const FMOD_DSP_SFXREVERB_HIGHCUT = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_HIGHCUT);
pub const FMOD_DSP_SFXREVERB_EARLYLATEMIX = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_EARLYLATEMIX);
pub const FMOD_DSP_SFXREVERB_WETLEVEL = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_WETLEVEL);
pub const FMOD_DSP_SFXREVERB_DRYLEVEL = @enumToInt(enum_unnamed_16.FMOD_DSP_SFXREVERB_DRYLEVEL);
const enum_unnamed_16 = extern enum(c_int) {
    FMOD_DSP_SFXREVERB_DECAYTIME,
    FMOD_DSP_SFXREVERB_EARLYDELAY,
    FMOD_DSP_SFXREVERB_LATEDELAY,
    FMOD_DSP_SFXREVERB_HFREFERENCE,
    FMOD_DSP_SFXREVERB_HFDECAYRATIO,
    FMOD_DSP_SFXREVERB_DIFFUSION,
    FMOD_DSP_SFXREVERB_DENSITY,
    FMOD_DSP_SFXREVERB_LOWSHELFFREQUENCY,
    FMOD_DSP_SFXREVERB_LOWSHELFGAIN,
    FMOD_DSP_SFXREVERB_HIGHCUT,
    FMOD_DSP_SFXREVERB_EARLYLATEMIX,
    FMOD_DSP_SFXREVERB_WETLEVEL,
    FMOD_DSP_SFXREVERB_DRYLEVEL,
    _,
};
pub const FMOD_DSP_SFXREVERB = enum_unnamed_16;
pub const FMOD_DSP_LOWPASS_SIMPLE_CUTOFF = @enumToInt(enum_unnamed_17.FMOD_DSP_LOWPASS_SIMPLE_CUTOFF);
const enum_unnamed_17 = extern enum(c_int) {
    FMOD_DSP_LOWPASS_SIMPLE_CUTOFF,
    _,
};
pub const FMOD_DSP_LOWPASS_SIMPLE = enum_unnamed_17;
pub const FMOD_DSP_DELAY_CH0 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH0);
pub const FMOD_DSP_DELAY_CH1 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH1);
pub const FMOD_DSP_DELAY_CH2 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH2);
pub const FMOD_DSP_DELAY_CH3 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH3);
pub const FMOD_DSP_DELAY_CH4 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH4);
pub const FMOD_DSP_DELAY_CH5 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH5);
pub const FMOD_DSP_DELAY_CH6 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH6);
pub const FMOD_DSP_DELAY_CH7 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH7);
pub const FMOD_DSP_DELAY_CH8 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH8);
pub const FMOD_DSP_DELAY_CH9 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH9);
pub const FMOD_DSP_DELAY_CH10 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH10);
pub const FMOD_DSP_DELAY_CH11 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH11);
pub const FMOD_DSP_DELAY_CH12 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH12);
pub const FMOD_DSP_DELAY_CH13 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH13);
pub const FMOD_DSP_DELAY_CH14 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH14);
pub const FMOD_DSP_DELAY_CH15 = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_CH15);
pub const FMOD_DSP_DELAY_MAXDELAY = @enumToInt(enum_unnamed_18.FMOD_DSP_DELAY_MAXDELAY);
const enum_unnamed_18 = extern enum(c_int) {
    FMOD_DSP_DELAY_CH0,
    FMOD_DSP_DELAY_CH1,
    FMOD_DSP_DELAY_CH2,
    FMOD_DSP_DELAY_CH3,
    FMOD_DSP_DELAY_CH4,
    FMOD_DSP_DELAY_CH5,
    FMOD_DSP_DELAY_CH6,
    FMOD_DSP_DELAY_CH7,
    FMOD_DSP_DELAY_CH8,
    FMOD_DSP_DELAY_CH9,
    FMOD_DSP_DELAY_CH10,
    FMOD_DSP_DELAY_CH11,
    FMOD_DSP_DELAY_CH12,
    FMOD_DSP_DELAY_CH13,
    FMOD_DSP_DELAY_CH14,
    FMOD_DSP_DELAY_CH15,
    FMOD_DSP_DELAY_MAXDELAY,
    _,
};
pub const FMOD_DSP_DELAY = enum_unnamed_18;
pub const FMOD_DSP_TREMOLO_FREQUENCY = @enumToInt(enum_unnamed_19.FMOD_DSP_TREMOLO_FREQUENCY);
pub const FMOD_DSP_TREMOLO_DEPTH = @enumToInt(enum_unnamed_19.FMOD_DSP_TREMOLO_DEPTH);
pub const FMOD_DSP_TREMOLO_SHAPE = @enumToInt(enum_unnamed_19.FMOD_DSP_TREMOLO_SHAPE);
pub const FMOD_DSP_TREMOLO_SKEW = @enumToInt(enum_unnamed_19.FMOD_DSP_TREMOLO_SKEW);
pub const FMOD_DSP_TREMOLO_DUTY = @enumToInt(enum_unnamed_19.FMOD_DSP_TREMOLO_DUTY);
pub const FMOD_DSP_TREMOLO_SQUARE = @enumToInt(enum_unnamed_19.FMOD_DSP_TREMOLO_SQUARE);
pub const FMOD_DSP_TREMOLO_PHASE = @enumToInt(enum_unnamed_19.FMOD_DSP_TREMOLO_PHASE);
pub const FMOD_DSP_TREMOLO_SPREAD = @enumToInt(enum_unnamed_19.FMOD_DSP_TREMOLO_SPREAD);
const enum_unnamed_19 = extern enum(c_int) {
    FMOD_DSP_TREMOLO_FREQUENCY,
    FMOD_DSP_TREMOLO_DEPTH,
    FMOD_DSP_TREMOLO_SHAPE,
    FMOD_DSP_TREMOLO_SKEW,
    FMOD_DSP_TREMOLO_DUTY,
    FMOD_DSP_TREMOLO_SQUARE,
    FMOD_DSP_TREMOLO_PHASE,
    FMOD_DSP_TREMOLO_SPREAD,
    _,
};
pub const FMOD_DSP_TREMOLO = enum_unnamed_19;
pub const FMOD_DSP_SEND_RETURNID = @enumToInt(enum_unnamed_20.FMOD_DSP_SEND_RETURNID);
pub const FMOD_DSP_SEND_LEVEL = @enumToInt(enum_unnamed_20.FMOD_DSP_SEND_LEVEL);
const enum_unnamed_20 = extern enum(c_int) {
    FMOD_DSP_SEND_RETURNID,
    FMOD_DSP_SEND_LEVEL,
    _,
};
pub const FMOD_DSP_SEND = enum_unnamed_20;
pub const FMOD_DSP_RETURN_ID = @enumToInt(enum_unnamed_21.FMOD_DSP_RETURN_ID);
pub const FMOD_DSP_RETURN_INPUT_SPEAKER_MODE = @enumToInt(enum_unnamed_21.FMOD_DSP_RETURN_INPUT_SPEAKER_MODE);
const enum_unnamed_21 = extern enum(c_int) {
    FMOD_DSP_RETURN_ID,
    FMOD_DSP_RETURN_INPUT_SPEAKER_MODE,
    _,
};
pub const FMOD_DSP_RETURN = enum_unnamed_21;
pub const FMOD_DSP_HIGHPASS_SIMPLE_CUTOFF = @enumToInt(enum_unnamed_22.FMOD_DSP_HIGHPASS_SIMPLE_CUTOFF);
const enum_unnamed_22 = extern enum(c_int) {
    FMOD_DSP_HIGHPASS_SIMPLE_CUTOFF,
    _,
};
pub const FMOD_DSP_HIGHPASS_SIMPLE = enum_unnamed_22;
pub const FMOD_DSP_PAN_2D_STEREO_MODE_DISTRIBUTED = @enumToInt(enum_unnamed_23.FMOD_DSP_PAN_2D_STEREO_MODE_DISTRIBUTED);
pub const FMOD_DSP_PAN_2D_STEREO_MODE_DISCRETE = @enumToInt(enum_unnamed_23.FMOD_DSP_PAN_2D_STEREO_MODE_DISCRETE);
const enum_unnamed_23 = extern enum(c_int) {
    FMOD_DSP_PAN_2D_STEREO_MODE_DISTRIBUTED,
    FMOD_DSP_PAN_2D_STEREO_MODE_DISCRETE,
    _,
};
pub const FMOD_DSP_PAN_2D_STEREO_MODE_TYPE = enum_unnamed_23;
pub const FMOD_DSP_PAN_MODE_MONO = @enumToInt(enum_unnamed_24.FMOD_DSP_PAN_MODE_MONO);
pub const FMOD_DSP_PAN_MODE_STEREO = @enumToInt(enum_unnamed_24.FMOD_DSP_PAN_MODE_STEREO);
pub const FMOD_DSP_PAN_MODE_SURROUND = @enumToInt(enum_unnamed_24.FMOD_DSP_PAN_MODE_SURROUND);
const enum_unnamed_24 = extern enum(c_int) {
    FMOD_DSP_PAN_MODE_MONO,
    FMOD_DSP_PAN_MODE_STEREO,
    FMOD_DSP_PAN_MODE_SURROUND,
    _,
};
pub const FMOD_DSP_PAN_MODE_TYPE = enum_unnamed_24;
pub const FMOD_DSP_PAN_3D_ROLLOFF_LINEARSQUARED = @enumToInt(enum_unnamed_25.FMOD_DSP_PAN_3D_ROLLOFF_LINEARSQUARED);
pub const FMOD_DSP_PAN_3D_ROLLOFF_LINEAR = @enumToInt(enum_unnamed_25.FMOD_DSP_PAN_3D_ROLLOFF_LINEAR);
pub const FMOD_DSP_PAN_3D_ROLLOFF_INVERSE = @enumToInt(enum_unnamed_25.FMOD_DSP_PAN_3D_ROLLOFF_INVERSE);
pub const FMOD_DSP_PAN_3D_ROLLOFF_INVERSETAPERED = @enumToInt(enum_unnamed_25.FMOD_DSP_PAN_3D_ROLLOFF_INVERSETAPERED);
pub const FMOD_DSP_PAN_3D_ROLLOFF_CUSTOM = @enumToInt(enum_unnamed_25.FMOD_DSP_PAN_3D_ROLLOFF_CUSTOM);
const enum_unnamed_25 = extern enum(c_int) {
    FMOD_DSP_PAN_3D_ROLLOFF_LINEARSQUARED,
    FMOD_DSP_PAN_3D_ROLLOFF_LINEAR,
    FMOD_DSP_PAN_3D_ROLLOFF_INVERSE,
    FMOD_DSP_PAN_3D_ROLLOFF_INVERSETAPERED,
    FMOD_DSP_PAN_3D_ROLLOFF_CUSTOM,
    _,
};
pub const FMOD_DSP_PAN_3D_ROLLOFF_TYPE = enum_unnamed_25;
pub const FMOD_DSP_PAN_3D_EXTENT_MODE_AUTO = @enumToInt(enum_unnamed_26.FMOD_DSP_PAN_3D_EXTENT_MODE_AUTO);
pub const FMOD_DSP_PAN_3D_EXTENT_MODE_USER = @enumToInt(enum_unnamed_26.FMOD_DSP_PAN_3D_EXTENT_MODE_USER);
pub const FMOD_DSP_PAN_3D_EXTENT_MODE_OFF = @enumToInt(enum_unnamed_26.FMOD_DSP_PAN_3D_EXTENT_MODE_OFF);
const enum_unnamed_26 = extern enum(c_int) {
    FMOD_DSP_PAN_3D_EXTENT_MODE_AUTO,
    FMOD_DSP_PAN_3D_EXTENT_MODE_USER,
    FMOD_DSP_PAN_3D_EXTENT_MODE_OFF,
    _,
};
pub const FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE = enum_unnamed_26;
pub const FMOD_DSP_PAN_MODE = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_MODE);
pub const FMOD_DSP_PAN_2D_STEREO_POSITION = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_2D_STEREO_POSITION);
pub const FMOD_DSP_PAN_2D_DIRECTION = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_2D_DIRECTION);
pub const FMOD_DSP_PAN_2D_EXTENT = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_2D_EXTENT);
pub const FMOD_DSP_PAN_2D_ROTATION = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_2D_ROTATION);
pub const FMOD_DSP_PAN_2D_LFE_LEVEL = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_2D_LFE_LEVEL);
pub const FMOD_DSP_PAN_2D_STEREO_MODE = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_2D_STEREO_MODE);
pub const FMOD_DSP_PAN_2D_STEREO_SEPARATION = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_2D_STEREO_SEPARATION);
pub const FMOD_DSP_PAN_2D_STEREO_AXIS = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_2D_STEREO_AXIS);
pub const FMOD_DSP_PAN_ENABLED_SPEAKERS = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_ENABLED_SPEAKERS);
pub const FMOD_DSP_PAN_3D_POSITION = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_3D_POSITION);
pub const FMOD_DSP_PAN_3D_ROLLOFF = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_3D_ROLLOFF);
pub const FMOD_DSP_PAN_3D_MIN_DISTANCE = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_3D_MIN_DISTANCE);
pub const FMOD_DSP_PAN_3D_MAX_DISTANCE = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_3D_MAX_DISTANCE);
pub const FMOD_DSP_PAN_3D_EXTENT_MODE = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_3D_EXTENT_MODE);
pub const FMOD_DSP_PAN_3D_SOUND_SIZE = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_3D_SOUND_SIZE);
pub const FMOD_DSP_PAN_3D_MIN_EXTENT = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_3D_MIN_EXTENT);
pub const FMOD_DSP_PAN_3D_PAN_BLEND = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_3D_PAN_BLEND);
pub const FMOD_DSP_PAN_LFE_UPMIX_ENABLED = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_LFE_UPMIX_ENABLED);
pub const FMOD_DSP_PAN_OVERALL_GAIN = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_OVERALL_GAIN);
pub const FMOD_DSP_PAN_SURROUND_SPEAKER_MODE = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_SURROUND_SPEAKER_MODE);
pub const FMOD_DSP_PAN_2D_HEIGHT_BLEND = @enumToInt(enum_unnamed_27.FMOD_DSP_PAN_2D_HEIGHT_BLEND);
const enum_unnamed_27 = extern enum(c_int) {
    FMOD_DSP_PAN_MODE,
    FMOD_DSP_PAN_2D_STEREO_POSITION,
    FMOD_DSP_PAN_2D_DIRECTION,
    FMOD_DSP_PAN_2D_EXTENT,
    FMOD_DSP_PAN_2D_ROTATION,
    FMOD_DSP_PAN_2D_LFE_LEVEL,
    FMOD_DSP_PAN_2D_STEREO_MODE,
    FMOD_DSP_PAN_2D_STEREO_SEPARATION,
    FMOD_DSP_PAN_2D_STEREO_AXIS,
    FMOD_DSP_PAN_ENABLED_SPEAKERS,
    FMOD_DSP_PAN_3D_POSITION,
    FMOD_DSP_PAN_3D_ROLLOFF,
    FMOD_DSP_PAN_3D_MIN_DISTANCE,
    FMOD_DSP_PAN_3D_MAX_DISTANCE,
    FMOD_DSP_PAN_3D_EXTENT_MODE,
    FMOD_DSP_PAN_3D_SOUND_SIZE,
    FMOD_DSP_PAN_3D_MIN_EXTENT,
    FMOD_DSP_PAN_3D_PAN_BLEND,
    FMOD_DSP_PAN_LFE_UPMIX_ENABLED,
    FMOD_DSP_PAN_OVERALL_GAIN,
    FMOD_DSP_PAN_SURROUND_SPEAKER_MODE,
    FMOD_DSP_PAN_2D_HEIGHT_BLEND,
    _,
};
pub const FMOD_DSP_PAN = enum_unnamed_27;
pub const FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_12DB = @enumToInt(enum_unnamed_28.FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_12DB);
pub const FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_24DB = @enumToInt(enum_unnamed_28.FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_24DB);
pub const FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_48DB = @enumToInt(enum_unnamed_28.FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_48DB);
const enum_unnamed_28 = extern enum(c_int) {
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_12DB,
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_24DB,
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_48DB,
    _,
};
pub const FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE = enum_unnamed_28;
pub const FMOD_DSP_THREE_EQ_LOWGAIN = @enumToInt(enum_unnamed_29.FMOD_DSP_THREE_EQ_LOWGAIN);
pub const FMOD_DSP_THREE_EQ_MIDGAIN = @enumToInt(enum_unnamed_29.FMOD_DSP_THREE_EQ_MIDGAIN);
pub const FMOD_DSP_THREE_EQ_HIGHGAIN = @enumToInt(enum_unnamed_29.FMOD_DSP_THREE_EQ_HIGHGAIN);
pub const FMOD_DSP_THREE_EQ_LOWCROSSOVER = @enumToInt(enum_unnamed_29.FMOD_DSP_THREE_EQ_LOWCROSSOVER);
pub const FMOD_DSP_THREE_EQ_HIGHCROSSOVER = @enumToInt(enum_unnamed_29.FMOD_DSP_THREE_EQ_HIGHCROSSOVER);
pub const FMOD_DSP_THREE_EQ_CROSSOVERSLOPE = @enumToInt(enum_unnamed_29.FMOD_DSP_THREE_EQ_CROSSOVERSLOPE);
const enum_unnamed_29 = extern enum(c_int) {
    FMOD_DSP_THREE_EQ_LOWGAIN,
    FMOD_DSP_THREE_EQ_MIDGAIN,
    FMOD_DSP_THREE_EQ_HIGHGAIN,
    FMOD_DSP_THREE_EQ_LOWCROSSOVER,
    FMOD_DSP_THREE_EQ_HIGHCROSSOVER,
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE,
    _,
};
pub const FMOD_DSP_THREE_EQ = enum_unnamed_29;
pub const FMOD_DSP_FFT_WINDOW_RECT = @enumToInt(enum_unnamed_30.FMOD_DSP_FFT_WINDOW_RECT);
pub const FMOD_DSP_FFT_WINDOW_TRIANGLE = @enumToInt(enum_unnamed_30.FMOD_DSP_FFT_WINDOW_TRIANGLE);
pub const FMOD_DSP_FFT_WINDOW_HAMMING = @enumToInt(enum_unnamed_30.FMOD_DSP_FFT_WINDOW_HAMMING);
pub const FMOD_DSP_FFT_WINDOW_HANNING = @enumToInt(enum_unnamed_30.FMOD_DSP_FFT_WINDOW_HANNING);
pub const FMOD_DSP_FFT_WINDOW_BLACKMAN = @enumToInt(enum_unnamed_30.FMOD_DSP_FFT_WINDOW_BLACKMAN);
pub const FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS = @enumToInt(enum_unnamed_30.FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS);
const enum_unnamed_30 = extern enum(c_int) {
    FMOD_DSP_FFT_WINDOW_RECT,
    FMOD_DSP_FFT_WINDOW_TRIANGLE,
    FMOD_DSP_FFT_WINDOW_HAMMING,
    FMOD_DSP_FFT_WINDOW_HANNING,
    FMOD_DSP_FFT_WINDOW_BLACKMAN,
    FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS,
    _,
};
pub const FMOD_DSP_FFT_WINDOW = enum_unnamed_30;
pub const FMOD_DSP_FFT_WINDOWSIZE = @enumToInt(enum_unnamed_31.FMOD_DSP_FFT_WINDOWSIZE);
pub const FMOD_DSP_FFT_WINDOWTYPE = @enumToInt(enum_unnamed_31.FMOD_DSP_FFT_WINDOWTYPE);
pub const FMOD_DSP_FFT_SPECTRUMDATA = @enumToInt(enum_unnamed_31.FMOD_DSP_FFT_SPECTRUMDATA);
pub const FMOD_DSP_FFT_DOMINANT_FREQ = @enumToInt(enum_unnamed_31.FMOD_DSP_FFT_DOMINANT_FREQ);
const enum_unnamed_31 = extern enum(c_int) {
    FMOD_DSP_FFT_WINDOWSIZE,
    FMOD_DSP_FFT_WINDOWTYPE,
    FMOD_DSP_FFT_SPECTRUMDATA,
    FMOD_DSP_FFT_DOMINANT_FREQ,
    _,
};
pub const FMOD_DSP_FFT = enum_unnamed_31;
pub const FMOD_DSP_ENVELOPEFOLLOWER_ATTACK = @enumToInt(enum_unnamed_32.FMOD_DSP_ENVELOPEFOLLOWER_ATTACK);
pub const FMOD_DSP_ENVELOPEFOLLOWER_RELEASE = @enumToInt(enum_unnamed_32.FMOD_DSP_ENVELOPEFOLLOWER_RELEASE);
pub const FMOD_DSP_ENVELOPEFOLLOWER_ENVELOPE = @enumToInt(enum_unnamed_32.FMOD_DSP_ENVELOPEFOLLOWER_ENVELOPE);
pub const FMOD_DSP_ENVELOPEFOLLOWER_USESIDECHAIN = @enumToInt(enum_unnamed_32.FMOD_DSP_ENVELOPEFOLLOWER_USESIDECHAIN);
const enum_unnamed_32 = extern enum(c_int) {
    FMOD_DSP_ENVELOPEFOLLOWER_ATTACK,
    FMOD_DSP_ENVELOPEFOLLOWER_RELEASE,
    FMOD_DSP_ENVELOPEFOLLOWER_ENVELOPE,
    FMOD_DSP_ENVELOPEFOLLOWER_USESIDECHAIN,
    _,
};
pub const FMOD_DSP_ENVELOPEFOLLOWER = enum_unnamed_32;
pub const FMOD_DSP_CONVOLUTION_REVERB_PARAM_IR = @enumToInt(enum_unnamed_33.FMOD_DSP_CONVOLUTION_REVERB_PARAM_IR);
pub const FMOD_DSP_CONVOLUTION_REVERB_PARAM_WET = @enumToInt(enum_unnamed_33.FMOD_DSP_CONVOLUTION_REVERB_PARAM_WET);
pub const FMOD_DSP_CONVOLUTION_REVERB_PARAM_DRY = @enumToInt(enum_unnamed_33.FMOD_DSP_CONVOLUTION_REVERB_PARAM_DRY);
pub const FMOD_DSP_CONVOLUTION_REVERB_PARAM_LINKED = @enumToInt(enum_unnamed_33.FMOD_DSP_CONVOLUTION_REVERB_PARAM_LINKED);
const enum_unnamed_33 = extern enum(c_int) {
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_IR,
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_WET,
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_DRY,
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_LINKED,
    _,
};
pub const FMOD_DSP_CONVOLUTION_REVERB = enum_unnamed_33;
pub const FMOD_DSP_CHANNELMIX_OUTPUT_DEFAULT = @enumToInt(enum_unnamed_34.FMOD_DSP_CHANNELMIX_OUTPUT_DEFAULT);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_ALLMONO = @enumToInt(enum_unnamed_34.FMOD_DSP_CHANNELMIX_OUTPUT_ALLMONO);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_ALLSTEREO = @enumToInt(enum_unnamed_34.FMOD_DSP_CHANNELMIX_OUTPUT_ALLSTEREO);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_ALLQUAD = @enumToInt(enum_unnamed_34.FMOD_DSP_CHANNELMIX_OUTPUT_ALLQUAD);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_ALL5POINT1 = @enumToInt(enum_unnamed_34.FMOD_DSP_CHANNELMIX_OUTPUT_ALL5POINT1);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1 = @enumToInt(enum_unnamed_34.FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_ALLLFE = @enumToInt(enum_unnamed_34.FMOD_DSP_CHANNELMIX_OUTPUT_ALLLFE);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1POINT4 = @enumToInt(enum_unnamed_34.FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1POINT4);
const enum_unnamed_34 = extern enum(c_int) {
    FMOD_DSP_CHANNELMIX_OUTPUT_DEFAULT,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLMONO,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLSTEREO,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLQUAD,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALL5POINT1,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLLFE,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1POINT4,
    _,
};
pub const FMOD_DSP_CHANNELMIX_OUTPUT = enum_unnamed_34;
pub const FMOD_DSP_CHANNELMIX_OUTPUTGROUPING = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUTGROUPING);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH0 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH0);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH1 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH1);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH2 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH2);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH3 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH3);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH4 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH4);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH5 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH5);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH6 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH6);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH7 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH7);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH8 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH8);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH9 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH9);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH10 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH10);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH11 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH11);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH12 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH12);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH13 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH13);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH14 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH14);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH15 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH15);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH16 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH16);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH17 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH17);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH18 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH18);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH19 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH19);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH20 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH20);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH21 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH21);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH22 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH22);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH23 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH23);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH24 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH24);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH25 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH25);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH26 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH26);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH27 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH27);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH28 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH28);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH29 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH29);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH30 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH30);
pub const FMOD_DSP_CHANNELMIX_GAIN_CH31 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_GAIN_CH31);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH0 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH0);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH1 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH1);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH2 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH2);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH3 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH3);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH4 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH4);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH5 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH5);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH6 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH6);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH7 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH7);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH8 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH8);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH9 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH9);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH10 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH10);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH11 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH11);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH12 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH12);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH13 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH13);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH14 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH14);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH15 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH15);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH16 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH16);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH17 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH17);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH18 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH18);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH19 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH19);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH20 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH20);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH21 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH21);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH22 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH22);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH23 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH23);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH24 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH24);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH25 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH25);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH26 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH26);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH27 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH27);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH28 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH28);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH29 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH29);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH30 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH30);
pub const FMOD_DSP_CHANNELMIX_OUTPUT_CH31 = @enumToInt(enum_unnamed_35.FMOD_DSP_CHANNELMIX_OUTPUT_CH31);
const enum_unnamed_35 = extern enum(c_int) {
    FMOD_DSP_CHANNELMIX_OUTPUTGROUPING,
    FMOD_DSP_CHANNELMIX_GAIN_CH0,
    FMOD_DSP_CHANNELMIX_GAIN_CH1,
    FMOD_DSP_CHANNELMIX_GAIN_CH2,
    FMOD_DSP_CHANNELMIX_GAIN_CH3,
    FMOD_DSP_CHANNELMIX_GAIN_CH4,
    FMOD_DSP_CHANNELMIX_GAIN_CH5,
    FMOD_DSP_CHANNELMIX_GAIN_CH6,
    FMOD_DSP_CHANNELMIX_GAIN_CH7,
    FMOD_DSP_CHANNELMIX_GAIN_CH8,
    FMOD_DSP_CHANNELMIX_GAIN_CH9,
    FMOD_DSP_CHANNELMIX_GAIN_CH10,
    FMOD_DSP_CHANNELMIX_GAIN_CH11,
    FMOD_DSP_CHANNELMIX_GAIN_CH12,
    FMOD_DSP_CHANNELMIX_GAIN_CH13,
    FMOD_DSP_CHANNELMIX_GAIN_CH14,
    FMOD_DSP_CHANNELMIX_GAIN_CH15,
    FMOD_DSP_CHANNELMIX_GAIN_CH16,
    FMOD_DSP_CHANNELMIX_GAIN_CH17,
    FMOD_DSP_CHANNELMIX_GAIN_CH18,
    FMOD_DSP_CHANNELMIX_GAIN_CH19,
    FMOD_DSP_CHANNELMIX_GAIN_CH20,
    FMOD_DSP_CHANNELMIX_GAIN_CH21,
    FMOD_DSP_CHANNELMIX_GAIN_CH22,
    FMOD_DSP_CHANNELMIX_GAIN_CH23,
    FMOD_DSP_CHANNELMIX_GAIN_CH24,
    FMOD_DSP_CHANNELMIX_GAIN_CH25,
    FMOD_DSP_CHANNELMIX_GAIN_CH26,
    FMOD_DSP_CHANNELMIX_GAIN_CH27,
    FMOD_DSP_CHANNELMIX_GAIN_CH28,
    FMOD_DSP_CHANNELMIX_GAIN_CH29,
    FMOD_DSP_CHANNELMIX_GAIN_CH30,
    FMOD_DSP_CHANNELMIX_GAIN_CH31,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH0,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH1,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH2,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH3,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH4,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH5,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH6,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH7,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH8,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH9,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH10,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH11,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH12,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH13,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH14,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH15,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH16,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH17,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH18,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH19,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH20,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH21,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH22,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH23,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH24,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH25,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH26,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH27,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH28,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH29,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH30,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH31,
    _,
};
pub const FMOD_DSP_CHANNELMIX = enum_unnamed_35;
pub const FMOD_DSP_TRANSCEIVER_SPEAKERMODE_AUTO = @enumToInt(enum_unnamed_36.FMOD_DSP_TRANSCEIVER_SPEAKERMODE_AUTO);
pub const FMOD_DSP_TRANSCEIVER_SPEAKERMODE_MONO = @enumToInt(enum_unnamed_36.FMOD_DSP_TRANSCEIVER_SPEAKERMODE_MONO);
pub const FMOD_DSP_TRANSCEIVER_SPEAKERMODE_STEREO = @enumToInt(enum_unnamed_36.FMOD_DSP_TRANSCEIVER_SPEAKERMODE_STEREO);
pub const FMOD_DSP_TRANSCEIVER_SPEAKERMODE_SURROUND = @enumToInt(enum_unnamed_36.FMOD_DSP_TRANSCEIVER_SPEAKERMODE_SURROUND);
const enum_unnamed_36 = extern enum(c_int) {
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_AUTO = -1,
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_MONO = 0,
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_STEREO = 1,
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_SURROUND = 2,
    _,
};
pub const FMOD_DSP_TRANSCEIVER_SPEAKERMODE = enum_unnamed_36;
pub const FMOD_DSP_TRANSCEIVER_TRANSMIT = @enumToInt(enum_unnamed_37.FMOD_DSP_TRANSCEIVER_TRANSMIT);
pub const FMOD_DSP_TRANSCEIVER_GAIN = @enumToInt(enum_unnamed_37.FMOD_DSP_TRANSCEIVER_GAIN);
pub const FMOD_DSP_TRANSCEIVER_CHANNEL = @enumToInt(enum_unnamed_37.FMOD_DSP_TRANSCEIVER_CHANNEL);
pub const FMOD_DSP_TRANSCEIVER_TRANSMITSPEAKERMODE = @enumToInt(enum_unnamed_37.FMOD_DSP_TRANSCEIVER_TRANSMITSPEAKERMODE);
const enum_unnamed_37 = extern enum(c_int) {
    FMOD_DSP_TRANSCEIVER_TRANSMIT,
    FMOD_DSP_TRANSCEIVER_GAIN,
    FMOD_DSP_TRANSCEIVER_CHANNEL,
    FMOD_DSP_TRANSCEIVER_TRANSMITSPEAKERMODE,
    _,
};
pub const FMOD_DSP_TRANSCEIVER = enum_unnamed_37;
pub const FMOD_DSP_OBJECTPAN_3D_POSITION = @enumToInt(enum_unnamed_38.FMOD_DSP_OBJECTPAN_3D_POSITION);
pub const FMOD_DSP_OBJECTPAN_3D_ROLLOFF = @enumToInt(enum_unnamed_38.FMOD_DSP_OBJECTPAN_3D_ROLLOFF);
pub const FMOD_DSP_OBJECTPAN_3D_MIN_DISTANCE = @enumToInt(enum_unnamed_38.FMOD_DSP_OBJECTPAN_3D_MIN_DISTANCE);
pub const FMOD_DSP_OBJECTPAN_3D_MAX_DISTANCE = @enumToInt(enum_unnamed_38.FMOD_DSP_OBJECTPAN_3D_MAX_DISTANCE);
pub const FMOD_DSP_OBJECTPAN_3D_EXTENT_MODE = @enumToInt(enum_unnamed_38.FMOD_DSP_OBJECTPAN_3D_EXTENT_MODE);
pub const FMOD_DSP_OBJECTPAN_3D_SOUND_SIZE = @enumToInt(enum_unnamed_38.FMOD_DSP_OBJECTPAN_3D_SOUND_SIZE);
pub const FMOD_DSP_OBJECTPAN_3D_MIN_EXTENT = @enumToInt(enum_unnamed_38.FMOD_DSP_OBJECTPAN_3D_MIN_EXTENT);
pub const FMOD_DSP_OBJECTPAN_OVERALL_GAIN = @enumToInt(enum_unnamed_38.FMOD_DSP_OBJECTPAN_OVERALL_GAIN);
pub const FMOD_DSP_OBJECTPAN_OUTPUTGAIN = @enumToInt(enum_unnamed_38.FMOD_DSP_OBJECTPAN_OUTPUTGAIN);
const enum_unnamed_38 = extern enum(c_int) {
    FMOD_DSP_OBJECTPAN_3D_POSITION,
    FMOD_DSP_OBJECTPAN_3D_ROLLOFF,
    FMOD_DSP_OBJECTPAN_3D_MIN_DISTANCE,
    FMOD_DSP_OBJECTPAN_3D_MAX_DISTANCE,
    FMOD_DSP_OBJECTPAN_3D_EXTENT_MODE,
    FMOD_DSP_OBJECTPAN_3D_SOUND_SIZE,
    FMOD_DSP_OBJECTPAN_3D_MIN_EXTENT,
    FMOD_DSP_OBJECTPAN_OVERALL_GAIN,
    FMOD_DSP_OBJECTPAN_OUTPUTGAIN,
    _,
};
pub const FMOD_DSP_OBJECTPAN = enum_unnamed_38;
pub const struct_FMOD_DSP_STATE = extern struct {
    instance: ?*c_void,
    plugindata: ?*c_void,
    channelmask: FMOD_CHANNELMASK,
    source_speakermode: FMOD_SPEAKERMODE,
    sidechaindata: [*c]f32,
    sidechainchannels: c_int,
    functions: [*c]FMOD_DSP_STATE_FUNCTIONS,
    systemobject: c_int,
};
pub const FMOD_DSP_STATE = struct_FMOD_DSP_STATE;
pub const struct_FMOD_DSP_BUFFER_ARRAY = extern struct {
    numbuffers: c_int,
    buffernumchannels: [*c]c_int,
    bufferchannelmask: [*c]FMOD_CHANNELMASK,
    buffers: [*c][*c]f32,
    speakermode: FMOD_SPEAKERMODE,
};
pub const FMOD_DSP_BUFFER_ARRAY = struct_FMOD_DSP_BUFFER_ARRAY;
pub const struct_FMOD_COMPLEX = extern struct {
    real: f32,
    imag: f32,
};
pub const FMOD_COMPLEX = struct_FMOD_COMPLEX;
pub const FMOD_DSP_PROCESS_PERFORM = @enumToInt(enum_unnamed_39.FMOD_DSP_PROCESS_PERFORM);
pub const FMOD_DSP_PROCESS_QUERY = @enumToInt(enum_unnamed_39.FMOD_DSP_PROCESS_QUERY);
const enum_unnamed_39 = extern enum(c_int) {
    FMOD_DSP_PROCESS_PERFORM,
    FMOD_DSP_PROCESS_QUERY,
    _,
};
pub const FMOD_DSP_PROCESS_OPERATION = enum_unnamed_39;
pub const FMOD_DSP_PAN_SURROUND_DEFAULT = @enumToInt(enum_FMOD_DSP_PAN_SURROUND_FLAGS.FMOD_DSP_PAN_SURROUND_DEFAULT);
pub const FMOD_DSP_PAN_SURROUND_ROTATION_NOT_BIASED = @enumToInt(enum_FMOD_DSP_PAN_SURROUND_FLAGS.FMOD_DSP_PAN_SURROUND_ROTATION_NOT_BIASED);
pub const FMOD_DSP_PAN_SURROUND_FLAGS_FORCEINT = @enumToInt(enum_FMOD_DSP_PAN_SURROUND_FLAGS._FORCEINT);
pub const enum_FMOD_DSP_PAN_SURROUND_FLAGS = extern enum(c_int) {
    FMOD_DSP_PAN_SURROUND_DEFAULT = 0,
    FMOD_DSP_PAN_SURROUND_ROTATION_NOT_BIASED = 1,
    _FORCEINT = 65536,
    _,
};
pub const FMOD_DSP_PAN_SURROUND_FLAGS = enum_FMOD_DSP_PAN_SURROUND_FLAGS;
pub const FMOD_DSP_PARAMETER_TYPE_FLOAT = @enumToInt(enum_unnamed_40.FMOD_DSP_PARAMETER_TYPE_FLOAT);
pub const FMOD_DSP_PARAMETER_TYPE_INT = @enumToInt(enum_unnamed_40.FMOD_DSP_PARAMETER_TYPE_INT);
pub const FMOD_DSP_PARAMETER_TYPE_BOOL = @enumToInt(enum_unnamed_40.FMOD_DSP_PARAMETER_TYPE_BOOL);
pub const FMOD_DSP_PARAMETER_TYPE_DATA = @enumToInt(enum_unnamed_40.FMOD_DSP_PARAMETER_TYPE_DATA);
pub const FMOD_DSP_PARAMETER_TYPE_MAX = @enumToInt(enum_unnamed_40.FMOD_DSP_PARAMETER_TYPE_MAX);
pub const FMOD_DSP_PARAMETER_TYPE_FORCEINT = @enumToInt(enum_unnamed_40.FMOD_DSP_PARAMETER_TYPE_FORCEINT);
const enum_unnamed_40 = extern enum(c_int) {
    FMOD_DSP_PARAMETER_TYPE_FLOAT = 0,
    FMOD_DSP_PARAMETER_TYPE_INT = 1,
    FMOD_DSP_PARAMETER_TYPE_BOOL = 2,
    FMOD_DSP_PARAMETER_TYPE_DATA = 3,
    FMOD_DSP_PARAMETER_TYPE_MAX = 4,
    FMOD_DSP_PARAMETER_TYPE_FORCEINT = 65536,
    _,
};
pub const FMOD_DSP_PARAMETER_TYPE = enum_unnamed_40;
pub const FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR = @enumToInt(enum_unnamed_41.FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR);
pub const FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO = @enumToInt(enum_unnamed_41.FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO);
pub const FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR = @enumToInt(enum_unnamed_41.FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR);
pub const FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FORCEINT = @enumToInt(enum_unnamed_41.FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FORCEINT);
const enum_unnamed_41 = extern enum(c_int) {
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR = 0,
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO = 1,
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR = 2,
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FORCEINT = 65536,
    _,
};
pub const FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE = enum_unnamed_41;
pub const FMOD_DSP_PARAMETER_DATA_TYPE_USER = @enumToInt(enum_unnamed_42.FMOD_DSP_PARAMETER_DATA_TYPE_USER);
pub const FMOD_DSP_PARAMETER_DATA_TYPE_OVERALLGAIN = @enumToInt(enum_unnamed_42.FMOD_DSP_PARAMETER_DATA_TYPE_OVERALLGAIN);
pub const FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES = @enumToInt(enum_unnamed_42.FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES);
pub const FMOD_DSP_PARAMETER_DATA_TYPE_SIDECHAIN = @enumToInt(enum_unnamed_42.FMOD_DSP_PARAMETER_DATA_TYPE_SIDECHAIN);
pub const FMOD_DSP_PARAMETER_DATA_TYPE_FFT = @enumToInt(enum_unnamed_42.FMOD_DSP_PARAMETER_DATA_TYPE_FFT);
pub const FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI = @enumToInt(enum_unnamed_42.FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI);
const enum_unnamed_42 = extern enum(c_int) {
    FMOD_DSP_PARAMETER_DATA_TYPE_USER = 0,
    FMOD_DSP_PARAMETER_DATA_TYPE_OVERALLGAIN = -1,
    FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES = -2,
    FMOD_DSP_PARAMETER_DATA_TYPE_SIDECHAIN = -3,
    FMOD_DSP_PARAMETER_DATA_TYPE_FFT = -4,
    FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI = -5,
    _,
};
pub const FMOD_DSP_PARAMETER_DATA_TYPE = enum_unnamed_42;
pub const FMOD_DSP_CREATE_CALLBACK = ?fn ([*c]FMOD_DSP_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_RELEASE_CALLBACK = ?fn ([*c]FMOD_DSP_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_RESET_CALLBACK = ?fn ([*c]FMOD_DSP_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_READ_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, [*c]f32, [*c]f32, c_uint, c_int, [*c]c_int) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_PROCESS_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, c_uint, [*c]const FMOD_DSP_BUFFER_ARRAY, [*c]FMOD_DSP_BUFFER_ARRAY, FMOD_BOOL, FMOD_DSP_PROCESS_OPERATION) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_SETPOSITION_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, c_uint) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_SHOULDIPROCESS_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, FMOD_BOOL, c_uint, FMOD_CHANNELMASK, c_int, FMOD_SPEAKERMODE) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_SETPARAM_FLOAT_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, c_int, f32) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_SETPARAM_INT_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, c_int, c_int) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_SETPARAM_BOOL_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, c_int, FMOD_BOOL) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_SETPARAM_DATA_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, c_int, ?*c_void, c_uint) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_GETPARAM_FLOAT_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, c_int, [*c]f32, [*c]u8) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_GETPARAM_INT_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, c_int, [*c]c_int, [*c]u8) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_GETPARAM_BOOL_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, c_int, [*c]FMOD_BOOL, [*c]u8) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_GETPARAM_DATA_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, c_int, [*c]?*c_void, [*c]c_uint, [*c]u8) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_SYSTEM_REGISTER_CALLBACK = ?fn ([*c]FMOD_DSP_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_SYSTEM_DEREGISTER_CALLBACK = ?fn ([*c]FMOD_DSP_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_SYSTEM_MIX_CALLBACK = ?fn ([*c]FMOD_DSP_STATE, c_int) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_ALLOC_FUNC = ?fn (c_uint, FMOD_MEMORY_TYPE, [*c]const u8) callconv(.C) ?*c_void;
pub const FMOD_DSP_REALLOC_FUNC = ?fn (?*c_void, c_uint, FMOD_MEMORY_TYPE, [*c]const u8) callconv(.C) ?*c_void;
pub const FMOD_DSP_FREE_FUNC = ?fn (?*c_void, FMOD_MEMORY_TYPE, [*c]const u8) callconv(.C) void;
pub const FMOD_DSP_LOG_FUNC = ?fn (FMOD_DEBUG_FLAGS, [*c]const u8, c_int, [*c]const u8, [*c]const u8, ...) callconv(.C) void;
pub const FMOD_DSP_GETSAMPLERATE_FUNC = ?fn ([*c]FMOD_DSP_STATE, [*c]c_int) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_GETBLOCKSIZE_FUNC = ?fn ([*c]FMOD_DSP_STATE, [*c]c_uint) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_GETSPEAKERMODE_FUNC = ?fn ([*c]FMOD_DSP_STATE, [*c]FMOD_SPEAKERMODE, [*c]FMOD_SPEAKERMODE) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_GETCLOCK_FUNC = ?fn ([*c]FMOD_DSP_STATE, [*c]c_ulonglong, [*c]c_uint, [*c]c_uint) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_GETLISTENERATTRIBUTES_FUNC = ?fn ([*c]FMOD_DSP_STATE, [*c]c_int, [*c]FMOD_3D_ATTRIBUTES) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_GETUSERDATA_FUNC = ?fn ([*c]FMOD_DSP_STATE, [*c]?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_DFT_FFTREAL_FUNC = ?fn ([*c]FMOD_DSP_STATE, c_int, [*c]const f32, [*c]FMOD_COMPLEX, [*c]const f32, c_int) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_DFT_IFFTREAL_FUNC = ?fn ([*c]FMOD_DSP_STATE, c_int, [*c]const FMOD_COMPLEX, [*c]f32, [*c]const f32, c_int) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_PAN_SUMMONOMATRIX_FUNC = ?fn ([*c]FMOD_DSP_STATE, FMOD_SPEAKERMODE, f32, f32, [*c]f32) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC = ?fn ([*c]FMOD_DSP_STATE, FMOD_SPEAKERMODE, f32, f32, f32, c_int, [*c]f32) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC = ?fn ([*c]FMOD_DSP_STATE, FMOD_SPEAKERMODE, FMOD_SPEAKERMODE, f32, f32, f32, f32, f32, c_int, [*c]f32, FMOD_DSP_PAN_SURROUND_FLAGS) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC = ?fn ([*c]FMOD_DSP_STATE, FMOD_SPEAKERMODE, f32, f32, f32, f32, c_int, [*c]f32) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC = ?fn ([*c]FMOD_DSP_STATE, FMOD_SPEAKERMODE, f32, f32, f32, f32, f32, c_int, [*c]f32) callconv(.C) FMOD_RESULT;
pub const FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC = ?fn ([*c]FMOD_DSP_STATE, FMOD_DSP_PAN_3D_ROLLOFF_TYPE, f32, f32, f32, [*c]f32) callconv(.C) FMOD_RESULT;
pub const struct_FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR = extern struct {
    numpoints: c_int,
    pointparamvalues: [*c]f32,
    pointpositions: [*c]f32,
};
pub const FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR = struct_FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR;
pub const struct_FMOD_DSP_PARAMETER_FLOAT_MAPPING = extern struct {
    type: FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE,
    piecewiselinearmapping: FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR,
};
pub const FMOD_DSP_PARAMETER_FLOAT_MAPPING = struct_FMOD_DSP_PARAMETER_FLOAT_MAPPING;
pub const struct_FMOD_DSP_PARAMETER_DESC_FLOAT = extern struct {
    min: f32,
    max: f32,
    defaultval: f32,
    mapping: FMOD_DSP_PARAMETER_FLOAT_MAPPING,
};
pub const FMOD_DSP_PARAMETER_DESC_FLOAT = struct_FMOD_DSP_PARAMETER_DESC_FLOAT;
pub const struct_FMOD_DSP_PARAMETER_DESC_INT = extern struct {
    min: c_int,
    max: c_int,
    defaultval: c_int,
    goestoinf: FMOD_BOOL,
    valuenames: [*c]const [*c]const u8,
};
pub const FMOD_DSP_PARAMETER_DESC_INT = struct_FMOD_DSP_PARAMETER_DESC_INT;
pub const struct_FMOD_DSP_PARAMETER_DESC_BOOL = extern struct {
    defaultval: FMOD_BOOL,
    valuenames: [*c]const [*c]const u8,
};
pub const FMOD_DSP_PARAMETER_DESC_BOOL = struct_FMOD_DSP_PARAMETER_DESC_BOOL;
pub const struct_FMOD_DSP_PARAMETER_DESC_DATA = extern struct {
    datatype: c_int,
};
pub const FMOD_DSP_PARAMETER_DESC_DATA = struct_FMOD_DSP_PARAMETER_DESC_DATA;
const union_unnamed_43 = extern union {
    floatdesc: FMOD_DSP_PARAMETER_DESC_FLOAT,
    intdesc: FMOD_DSP_PARAMETER_DESC_INT,
    booldesc: FMOD_DSP_PARAMETER_DESC_BOOL,
    datadesc: FMOD_DSP_PARAMETER_DESC_DATA,
};
pub const struct_FMOD_DSP_PARAMETER_DESC = extern struct {
    type: FMOD_DSP_PARAMETER_TYPE,
    name: [16]u8,
    label: [16]u8,
    description: [*c]const u8,
    unnamed_0: union_unnamed_43,
};
pub const FMOD_DSP_PARAMETER_DESC = struct_FMOD_DSP_PARAMETER_DESC;
pub const struct_FMOD_DSP_PARAMETER_OVERALLGAIN = extern struct {
    linear_gain: f32,
    linear_gain_additive: f32,
};
pub const FMOD_DSP_PARAMETER_OVERALLGAIN = struct_FMOD_DSP_PARAMETER_OVERALLGAIN;
pub const struct_FMOD_DSP_PARAMETER_3DATTRIBUTES = extern struct {
    relative: FMOD_3D_ATTRIBUTES,
    absolute: FMOD_3D_ATTRIBUTES,
};
pub const FMOD_DSP_PARAMETER_3DATTRIBUTES = struct_FMOD_DSP_PARAMETER_3DATTRIBUTES;
pub const struct_FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI = extern struct {
    numlisteners: c_int,
    relative: [8]FMOD_3D_ATTRIBUTES,
    weight: [8]f32,
    absolute: FMOD_3D_ATTRIBUTES,
};
pub const FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI = struct_FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI;
pub const struct_FMOD_DSP_PARAMETER_SIDECHAIN = extern struct {
    sidechainenable: FMOD_BOOL,
};
pub const FMOD_DSP_PARAMETER_SIDECHAIN = struct_FMOD_DSP_PARAMETER_SIDECHAIN;
pub const struct_FMOD_DSP_PARAMETER_FFT = extern struct {
    length: c_int,
    numchannels: c_int,
    spectrum: [32][*c]f32,
};
pub const FMOD_DSP_PARAMETER_FFT = struct_FMOD_DSP_PARAMETER_FFT;
pub const struct_FMOD_DSP_DESCRIPTION = extern struct {
    pluginsdkversion: c_uint,
    name: [32]u8,
    version: c_uint,
    numinputbuffers: c_int,
    numoutputbuffers: c_int,
    create: FMOD_DSP_CREATE_CALLBACK,
    release: FMOD_DSP_RELEASE_CALLBACK,
    reset: FMOD_DSP_RESET_CALLBACK,
    read: FMOD_DSP_READ_CALLBACK,
    process: FMOD_DSP_PROCESS_CALLBACK,
    setposition: FMOD_DSP_SETPOSITION_CALLBACK,
    numparameters: c_int,
    paramdesc: [*c][*c]FMOD_DSP_PARAMETER_DESC,
    setparameterfloat: FMOD_DSP_SETPARAM_FLOAT_CALLBACK,
    setparameterint: FMOD_DSP_SETPARAM_INT_CALLBACK,
    setparameterbool: FMOD_DSP_SETPARAM_BOOL_CALLBACK,
    setparameterdata: FMOD_DSP_SETPARAM_DATA_CALLBACK,
    getparameterfloat: FMOD_DSP_GETPARAM_FLOAT_CALLBACK,
    getparameterint: FMOD_DSP_GETPARAM_INT_CALLBACK,
    getparameterbool: FMOD_DSP_GETPARAM_BOOL_CALLBACK,
    getparameterdata: FMOD_DSP_GETPARAM_DATA_CALLBACK,
    shouldiprocess: FMOD_DSP_SHOULDIPROCESS_CALLBACK,
    userdata: ?*c_void,
    sys_register: FMOD_DSP_SYSTEM_REGISTER_CALLBACK,
    sys_deregister: FMOD_DSP_SYSTEM_DEREGISTER_CALLBACK,
    sys_mix: FMOD_DSP_SYSTEM_MIX_CALLBACK,
};
pub const FMOD_DSP_DESCRIPTION = struct_FMOD_DSP_DESCRIPTION;
pub const struct_FMOD_DSP_STATE_DFT_FUNCTIONS = extern struct {
    fftreal: FMOD_DSP_DFT_FFTREAL_FUNC,
    inversefftreal: FMOD_DSP_DFT_IFFTREAL_FUNC,
};
pub const FMOD_DSP_STATE_DFT_FUNCTIONS = struct_FMOD_DSP_STATE_DFT_FUNCTIONS;
pub const struct_FMOD_DSP_STATE_PAN_FUNCTIONS = extern struct {
    summonomatrix: FMOD_DSP_PAN_SUMMONOMATRIX_FUNC,
    sumstereomatrix: FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC,
    sumsurroundmatrix: FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC,
    summonotosurroundmatrix: FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC,
    sumstereotosurroundmatrix: FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC,
    getrolloffgain: FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC,
};
pub const FMOD_DSP_STATE_PAN_FUNCTIONS = struct_FMOD_DSP_STATE_PAN_FUNCTIONS;
pub const struct_FMOD_DSP_STATE_FUNCTIONS = extern struct {
    alloc: FMOD_DSP_ALLOC_FUNC,
    realloc: FMOD_DSP_REALLOC_FUNC,
    free: FMOD_DSP_FREE_FUNC,
    getsamplerate: FMOD_DSP_GETSAMPLERATE_FUNC,
    getblocksize: FMOD_DSP_GETBLOCKSIZE_FUNC,
    dft: [*c]FMOD_DSP_STATE_DFT_FUNCTIONS,
    pan: [*c]FMOD_DSP_STATE_PAN_FUNCTIONS,
    getspeakermode: FMOD_DSP_GETSPEAKERMODE_FUNC,
    getclock: FMOD_DSP_GETCLOCK_FUNC,
    getlistenerattributes: FMOD_DSP_GETLISTENERATTRIBUTES_FUNC,
    log: FMOD_DSP_LOG_FUNC,
    getuserdata: FMOD_DSP_GETUSERDATA_FUNC,
};
pub const FMOD_DSP_STATE_FUNCTIONS = struct_FMOD_DSP_STATE_FUNCTIONS;
pub const struct_FMOD_DSP_METERING_INFO = extern struct {
    numsamples: c_int,
    peaklevel: [32]f32,
    rmslevel: [32]f32,
    numchannels: c_short,
};
pub const FMOD_DSP_METERING_INFO = struct_FMOD_DSP_METERING_INFO;
pub const struct_FMOD_OUTPUT_STATE = extern struct {
    plugindata: ?*c_void,
    readfrommixer: FMOD_OUTPUT_READFROMMIXER_FUNC,
    alloc: FMOD_OUTPUT_ALLOC_FUNC,
    free: FMOD_OUTPUT_FREE_FUNC,
    log: FMOD_OUTPUT_LOG_FUNC,
    copyport: FMOD_OUTPUT_COPYPORT_FUNC,
    requestreset: FMOD_OUTPUT_REQUESTRESET_FUNC,
};
pub const FMOD_OUTPUT_STATE = struct_FMOD_OUTPUT_STATE;
pub const struct_FMOD_OUTPUT_OBJECT3DINFO = extern struct {
    buffer: [*c]f32,
    bufferlength: c_uint,
    position: FMOD_VECTOR,
    gain: f32,
    spread: f32,
    priority: f32,
};
pub const FMOD_OUTPUT_OBJECT3DINFO = struct_FMOD_OUTPUT_OBJECT3DINFO;
pub const FMOD_OUTPUT_METHOD = c_uint;
pub const FMOD_OUTPUT_GETNUMDRIVERS_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, [*c]c_int) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_GETDRIVERINFO_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, c_int, [*c]u8, c_int, [*c]FMOD_GUID, [*c]c_int, [*c]FMOD_SPEAKERMODE, [*c]c_int) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_INIT_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, c_int, FMOD_INITFLAGS, [*c]c_int, [*c]FMOD_SPEAKERMODE, [*c]c_int, [*c]FMOD_SOUND_FORMAT, c_int, c_int, ?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_START_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_STOP_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_CLOSE_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_UPDATE_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_GETHANDLE_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, [*c]?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_GETPOSITION_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, [*c]c_uint) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_LOCK_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, c_uint, c_uint, [*c]?*c_void, [*c]?*c_void, [*c]c_uint, [*c]c_uint) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_UNLOCK_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, ?*c_void, ?*c_void, c_uint, c_uint) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_MIXER_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_OBJECT3DGETINFO_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, [*c]c_int) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_OBJECT3DALLOC_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, [*c]?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_OBJECT3DFREE_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, ?*c_void) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_OBJECT3DUPDATE_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, ?*c_void, [*c]const FMOD_OUTPUT_OBJECT3DINFO) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_OPENPORT_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, FMOD_PORT_TYPE, FMOD_PORT_INDEX, [*c]c_int, [*c]c_int, [*c]c_int, [*c]FMOD_SOUND_FORMAT) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_CLOSEPORT_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE, c_int) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_DEVICELISTCHANGED_CALLBACK = ?fn ([*c]FMOD_OUTPUT_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_READFROMMIXER_FUNC = ?fn ([*c]FMOD_OUTPUT_STATE, ?*c_void, c_uint) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_COPYPORT_FUNC = ?fn ([*c]FMOD_OUTPUT_STATE, c_int, ?*c_void, c_uint) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_REQUESTRESET_FUNC = ?fn ([*c]FMOD_OUTPUT_STATE) callconv(.C) FMOD_RESULT;
pub const FMOD_OUTPUT_ALLOC_FUNC = ?fn (c_uint, c_uint, [*c]const u8, c_int) callconv(.C) ?*c_void;
pub const FMOD_OUTPUT_FREE_FUNC = ?fn (?*c_void, [*c]const u8, c_int) callconv(.C) void;
pub const FMOD_OUTPUT_LOG_FUNC = ?fn (FMOD_DEBUG_FLAGS, [*c]const u8, c_int, [*c]const u8, [*c]const u8, ...) callconv(.C) void;
pub const struct_FMOD_OUTPUT_DESCRIPTION = extern struct {
    apiversion: c_uint,
    name: [*c]const u8,
    version: c_uint,
    method: FMOD_OUTPUT_METHOD,
    getnumdrivers: FMOD_OUTPUT_GETNUMDRIVERS_CALLBACK,
    getdriverinfo: FMOD_OUTPUT_GETDRIVERINFO_CALLBACK,
    init: FMOD_OUTPUT_INIT_CALLBACK,
    start: FMOD_OUTPUT_START_CALLBACK,
    stop: FMOD_OUTPUT_STOP_CALLBACK,
    close: FMOD_OUTPUT_CLOSE_CALLBACK,
    update: FMOD_OUTPUT_UPDATE_CALLBACK,
    gethandle: FMOD_OUTPUT_GETHANDLE_CALLBACK,
    getposition: FMOD_OUTPUT_GETPOSITION_CALLBACK,
    lock: FMOD_OUTPUT_LOCK_CALLBACK,
    unlock: FMOD_OUTPUT_UNLOCK_CALLBACK,
    mixer: FMOD_OUTPUT_MIXER_CALLBACK,
    object3dgetinfo: FMOD_OUTPUT_OBJECT3DGETINFO_CALLBACK,
    object3dalloc: FMOD_OUTPUT_OBJECT3DALLOC_CALLBACK,
    object3dfree: FMOD_OUTPUT_OBJECT3DFREE_CALLBACK,
    object3dupdate: FMOD_OUTPUT_OBJECT3DUPDATE_CALLBACK,
    openport: FMOD_OUTPUT_OPENPORT_CALLBACK,
    closeport: FMOD_OUTPUT_CLOSEPORT_CALLBACK,
    devicelistchanged: FMOD_OUTPUT_DEVICELISTCHANGED_CALLBACK,
};
pub const FMOD_OUTPUT_DESCRIPTION = struct_FMOD_OUTPUT_DESCRIPTION;
pub extern fn FMOD_Memory_Initialize(poolmem: ?*c_void, poollen: c_int, useralloc: FMOD_MEMORY_ALLOC_CALLBACK, userrealloc: FMOD_MEMORY_REALLOC_CALLBACK, userfree: FMOD_MEMORY_FREE_CALLBACK, memtypeflags: FMOD_MEMORY_TYPE) FMOD_RESULT;
pub extern fn FMOD_Memory_GetStats(currentalloced: [*c]c_int, maxalloced: [*c]c_int, blocking: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Debug_Initialize(flags: FMOD_DEBUG_FLAGS, mode: FMOD_DEBUG_MODE, callback: FMOD_DEBUG_CALLBACK, filename: [*c]const u8) FMOD_RESULT;
pub extern fn FMOD_File_SetDiskBusy(busy: c_int) FMOD_RESULT;
pub extern fn FMOD_File_GetDiskBusy(busy: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Thread_SetAttributes(type: FMOD_THREAD_TYPE, affinity: FMOD_THREAD_AFFINITY, priority: FMOD_THREAD_PRIORITY, stacksize: FMOD_THREAD_STACK_SIZE) FMOD_RESULT;
pub extern fn FMOD_System_Create(system: [*c]?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_System_Release(system: ?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_System_SetOutput(system: ?*FMOD_SYSTEM, output: FMOD_OUTPUTTYPE) FMOD_RESULT;
pub extern fn FMOD_System_GetOutput(system: ?*FMOD_SYSTEM, output: [*c]FMOD_OUTPUTTYPE) FMOD_RESULT;
pub extern fn FMOD_System_GetNumDrivers(system: ?*FMOD_SYSTEM, numdrivers: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_GetDriverInfo(system: ?*FMOD_SYSTEM, id: c_int, name: [*c]u8, namelen: c_int, guid: [*c]FMOD_GUID, systemrate: [*c]c_int, speakermode: [*c]FMOD_SPEAKERMODE, speakermodechannels: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_SetDriver(system: ?*FMOD_SYSTEM, driver: c_int) FMOD_RESULT;
pub extern fn FMOD_System_GetDriver(system: ?*FMOD_SYSTEM, driver: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_SetSoftwareChannels(system: ?*FMOD_SYSTEM, numsoftwarechannels: c_int) FMOD_RESULT;
pub extern fn FMOD_System_GetSoftwareChannels(system: ?*FMOD_SYSTEM, numsoftwarechannels: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_SetSoftwareFormat(system: ?*FMOD_SYSTEM, samplerate: c_int, speakermode: FMOD_SPEAKERMODE, numrawspeakers: c_int) FMOD_RESULT;
pub extern fn FMOD_System_GetSoftwareFormat(system: ?*FMOD_SYSTEM, samplerate: [*c]c_int, speakermode: [*c]FMOD_SPEAKERMODE, numrawspeakers: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_SetDSPBufferSize(system: ?*FMOD_SYSTEM, bufferlength: c_uint, numbuffers: c_int) FMOD_RESULT;
pub extern fn FMOD_System_GetDSPBufferSize(system: ?*FMOD_SYSTEM, bufferlength: [*c]c_uint, numbuffers: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_SetFileSystem(system: ?*FMOD_SYSTEM, useropen: FMOD_FILE_OPEN_CALLBACK, userclose: FMOD_FILE_CLOSE_CALLBACK, userread: FMOD_FILE_READ_CALLBACK, userseek: FMOD_FILE_SEEK_CALLBACK, userasyncread: FMOD_FILE_ASYNCREAD_CALLBACK, userasynccancel: FMOD_FILE_ASYNCCANCEL_CALLBACK, blockalign: c_int) FMOD_RESULT;
pub extern fn FMOD_System_AttachFileSystem(system: ?*FMOD_SYSTEM, useropen: FMOD_FILE_OPEN_CALLBACK, userclose: FMOD_FILE_CLOSE_CALLBACK, userread: FMOD_FILE_READ_CALLBACK, userseek: FMOD_FILE_SEEK_CALLBACK) FMOD_RESULT;
pub extern fn FMOD_System_SetAdvancedSettings(system: ?*FMOD_SYSTEM, settings: [*c]FMOD_ADVANCEDSETTINGS) FMOD_RESULT;
pub extern fn FMOD_System_GetAdvancedSettings(system: ?*FMOD_SYSTEM, settings: [*c]FMOD_ADVANCEDSETTINGS) FMOD_RESULT;
pub extern fn FMOD_System_SetCallback(system: ?*FMOD_SYSTEM, callback: FMOD_SYSTEM_CALLBACK, callbackmask: FMOD_SYSTEM_CALLBACK_TYPE) FMOD_RESULT;
pub extern fn FMOD_System_SetPluginPath(system: ?*FMOD_SYSTEM, path: [*c]const u8) FMOD_RESULT;
pub extern fn FMOD_System_LoadPlugin(system: ?*FMOD_SYSTEM, filename: [*c]const u8, handle: [*c]c_uint, priority: c_uint) FMOD_RESULT;
pub extern fn FMOD_System_UnloadPlugin(system: ?*FMOD_SYSTEM, handle: c_uint) FMOD_RESULT;
pub extern fn FMOD_System_GetNumNestedPlugins(system: ?*FMOD_SYSTEM, handle: c_uint, count: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_GetNestedPlugin(system: ?*FMOD_SYSTEM, handle: c_uint, index: c_int, nestedhandle: [*c]c_uint) FMOD_RESULT;
pub extern fn FMOD_System_GetNumPlugins(system: ?*FMOD_SYSTEM, plugintype: FMOD_PLUGINTYPE, numplugins: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_GetPluginHandle(system: ?*FMOD_SYSTEM, plugintype: FMOD_PLUGINTYPE, index: c_int, handle: [*c]c_uint) FMOD_RESULT;
pub extern fn FMOD_System_GetPluginInfo(system: ?*FMOD_SYSTEM, handle: c_uint, plugintype: [*c]FMOD_PLUGINTYPE, name: [*c]u8, namelen: c_int, version: [*c]c_uint) FMOD_RESULT;
pub extern fn FMOD_System_SetOutputByPlugin(system: ?*FMOD_SYSTEM, handle: c_uint) FMOD_RESULT;
pub extern fn FMOD_System_GetOutputByPlugin(system: ?*FMOD_SYSTEM, handle: [*c]c_uint) FMOD_RESULT;
pub extern fn FMOD_System_CreateDSPByPlugin(system: ?*FMOD_SYSTEM, handle: c_uint, dsp: [*c]?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_System_GetDSPInfoByPlugin(system: ?*FMOD_SYSTEM, handle: c_uint, description: [*c][*c]const FMOD_DSP_DESCRIPTION) FMOD_RESULT;
pub extern fn FMOD_System_RegisterCodec(system: ?*FMOD_SYSTEM, description: [*c]FMOD_CODEC_DESCRIPTION, handle: [*c]c_uint, priority: c_uint) FMOD_RESULT;
pub extern fn FMOD_System_RegisterDSP(system: ?*FMOD_SYSTEM, description: [*c]const FMOD_DSP_DESCRIPTION, handle: [*c]c_uint) FMOD_RESULT;
pub extern fn FMOD_System_RegisterOutput(system: ?*FMOD_SYSTEM, description: [*c]const FMOD_OUTPUT_DESCRIPTION, handle: [*c]c_uint) FMOD_RESULT;
pub extern fn FMOD_System_Init(system: ?*FMOD_SYSTEM, maxchannels: c_int, flags: FMOD_INITFLAGS, extradriverdata: ?*c_void) FMOD_RESULT;
pub extern fn FMOD_System_Close(system: ?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_System_Update(system: ?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_System_SetSpeakerPosition(system: ?*FMOD_SYSTEM, speaker: FMOD_SPEAKER, x: f32, y: f32, active: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_System_GetSpeakerPosition(system: ?*FMOD_SYSTEM, speaker: FMOD_SPEAKER, x: [*c]f32, y: [*c]f32, active: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_System_SetStreamBufferSize(system: ?*FMOD_SYSTEM, filebuffersize: c_uint, filebuffersizetype: FMOD_TIMEUNIT) FMOD_RESULT;
pub extern fn FMOD_System_GetStreamBufferSize(system: ?*FMOD_SYSTEM, filebuffersize: [*c]c_uint, filebuffersizetype: [*c]FMOD_TIMEUNIT) FMOD_RESULT;
pub extern fn FMOD_System_Set3DSettings(system: ?*FMOD_SYSTEM, dopplerscale: f32, distancefactor: f32, rolloffscale: f32) FMOD_RESULT;
pub extern fn FMOD_System_Get3DSettings(system: ?*FMOD_SYSTEM, dopplerscale: [*c]f32, distancefactor: [*c]f32, rolloffscale: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_System_Set3DNumListeners(system: ?*FMOD_SYSTEM, numlisteners: c_int) FMOD_RESULT;
pub extern fn FMOD_System_Get3DNumListeners(system: ?*FMOD_SYSTEM, numlisteners: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_Set3DListenerAttributes(system: ?*FMOD_SYSTEM, listener: c_int, pos: [*c]const FMOD_VECTOR, vel: [*c]const FMOD_VECTOR, forward: [*c]const FMOD_VECTOR, up: [*c]const FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_System_Get3DListenerAttributes(system: ?*FMOD_SYSTEM, listener: c_int, pos: [*c]FMOD_VECTOR, vel: [*c]FMOD_VECTOR, forward: [*c]FMOD_VECTOR, up: [*c]FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_System_Set3DRolloffCallback(system: ?*FMOD_SYSTEM, callback: FMOD_3D_ROLLOFF_CALLBACK) FMOD_RESULT;
pub extern fn FMOD_System_MixerSuspend(system: ?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_System_MixerResume(system: ?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_System_GetDefaultMixMatrix(system: ?*FMOD_SYSTEM, sourcespeakermode: FMOD_SPEAKERMODE, targetspeakermode: FMOD_SPEAKERMODE, matrix: [*c]f32, matrixhop: c_int) FMOD_RESULT;
pub extern fn FMOD_System_GetSpeakerModeChannels(system: ?*FMOD_SYSTEM, mode: FMOD_SPEAKERMODE, channels: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_GetVersion(system: ?*FMOD_SYSTEM, version: [*c]c_uint) FMOD_RESULT;
pub extern fn FMOD_System_GetOutputHandle(system: ?*FMOD_SYSTEM, handle: [*c]?*c_void) FMOD_RESULT;
pub extern fn FMOD_System_GetChannelsPlaying(system: ?*FMOD_SYSTEM, channels: [*c]c_int, realchannels: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_GetCPUUsage(system: ?*FMOD_SYSTEM, dsp: [*c]f32, stream: [*c]f32, geometry: [*c]f32, update: [*c]f32, total: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_System_GetCPUUsageEx(system: ?*FMOD_SYSTEM, convolutionThread1: [*c]f32, convolutionThread2: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_System_GetFileUsage(system: ?*FMOD_SYSTEM, sampleBytesRead: [*c]c_longlong, streamBytesRead: [*c]c_longlong, otherBytesRead: [*c]c_longlong) FMOD_RESULT;
pub extern fn FMOD_System_CreateSound(system: ?*FMOD_SYSTEM, name_or_data: [*c]const u8, mode: FMOD_MODE, exinfo: [*c]FMOD_CREATESOUNDEXINFO, sound: [*c]?*FMOD_SOUND) FMOD_RESULT;
pub extern fn FMOD_System_CreateStream(system: ?*FMOD_SYSTEM, name_or_data: [*c]const u8, mode: FMOD_MODE, exinfo: [*c]FMOD_CREATESOUNDEXINFO, sound: [*c]?*FMOD_SOUND) FMOD_RESULT;
pub extern fn FMOD_System_CreateDSP(system: ?*FMOD_SYSTEM, description: [*c]const FMOD_DSP_DESCRIPTION, dsp: [*c]?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_System_CreateDSPByType(system: ?*FMOD_SYSTEM, type: FMOD_DSP_TYPE, dsp: [*c]?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_System_CreateChannelGroup(system: ?*FMOD_SYSTEM, name: [*c]const u8, channelgroup: [*c]?*FMOD_CHANNELGROUP) FMOD_RESULT;
pub extern fn FMOD_System_CreateSoundGroup(system: ?*FMOD_SYSTEM, name: [*c]const u8, soundgroup: [*c]?*FMOD_SOUNDGROUP) FMOD_RESULT;
pub extern fn FMOD_System_CreateReverb3D(system: ?*FMOD_SYSTEM, reverb: [*c]?*FMOD_REVERB3D) FMOD_RESULT;
pub extern fn FMOD_System_PlaySound(system: ?*FMOD_SYSTEM, sound: ?*FMOD_SOUND, channelgroup: ?*FMOD_CHANNELGROUP, paused: FMOD_BOOL, channel: [*c]?*FMOD_CHANNEL) FMOD_RESULT;
pub extern fn FMOD_System_PlayDSP(system: ?*FMOD_SYSTEM, dsp: ?*FMOD_DSP, channelgroup: ?*FMOD_CHANNELGROUP, paused: FMOD_BOOL, channel: [*c]?*FMOD_CHANNEL) FMOD_RESULT;
pub extern fn FMOD_System_GetChannel(system: ?*FMOD_SYSTEM, channelid: c_int, channel: [*c]?*FMOD_CHANNEL) FMOD_RESULT;
pub extern fn FMOD_System_GetDSPInfoByType(system: ?*FMOD_SYSTEM, type: FMOD_DSP_TYPE, description: [*c][*c]const FMOD_DSP_DESCRIPTION) FMOD_RESULT;
pub extern fn FMOD_System_GetMasterChannelGroup(system: ?*FMOD_SYSTEM, channelgroup: [*c]?*FMOD_CHANNELGROUP) FMOD_RESULT;
pub extern fn FMOD_System_GetMasterSoundGroup(system: ?*FMOD_SYSTEM, soundgroup: [*c]?*FMOD_SOUNDGROUP) FMOD_RESULT;
pub extern fn FMOD_System_AttachChannelGroupToPort(system: ?*FMOD_SYSTEM, portType: FMOD_PORT_TYPE, portIndex: FMOD_PORT_INDEX, channelgroup: ?*FMOD_CHANNELGROUP, passThru: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_System_DetachChannelGroupFromPort(system: ?*FMOD_SYSTEM, channelgroup: ?*FMOD_CHANNELGROUP) FMOD_RESULT;
pub extern fn FMOD_System_SetReverbProperties(system: ?*FMOD_SYSTEM, instance: c_int, prop: [*c]const FMOD_REVERB_PROPERTIES) FMOD_RESULT;
pub extern fn FMOD_System_GetReverbProperties(system: ?*FMOD_SYSTEM, instance: c_int, prop: [*c]FMOD_REVERB_PROPERTIES) FMOD_RESULT;
pub extern fn FMOD_System_LockDSP(system: ?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_System_UnlockDSP(system: ?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_System_GetRecordNumDrivers(system: ?*FMOD_SYSTEM, numdrivers: [*c]c_int, numconnected: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_GetRecordDriverInfo(system: ?*FMOD_SYSTEM, id: c_int, name: [*c]u8, namelen: c_int, guid: [*c]FMOD_GUID, systemrate: [*c]c_int, speakermode: [*c]FMOD_SPEAKERMODE, speakermodechannels: [*c]c_int, state: [*c]FMOD_DRIVER_STATE) FMOD_RESULT;
pub extern fn FMOD_System_GetRecordPosition(system: ?*FMOD_SYSTEM, id: c_int, position: [*c]c_uint) FMOD_RESULT;
pub extern fn FMOD_System_RecordStart(system: ?*FMOD_SYSTEM, id: c_int, sound: ?*FMOD_SOUND, loop: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_System_RecordStop(system: ?*FMOD_SYSTEM, id: c_int) FMOD_RESULT;
pub extern fn FMOD_System_IsRecording(system: ?*FMOD_SYSTEM, id: c_int, recording: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_System_CreateGeometry(system: ?*FMOD_SYSTEM, maxpolygons: c_int, maxvertices: c_int, geometry: [*c]?*FMOD_GEOMETRY) FMOD_RESULT;
pub extern fn FMOD_System_SetGeometrySettings(system: ?*FMOD_SYSTEM, maxworldsize: f32) FMOD_RESULT;
pub extern fn FMOD_System_GetGeometrySettings(system: ?*FMOD_SYSTEM, maxworldsize: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_System_LoadGeometry(system: ?*FMOD_SYSTEM, data: ?*const c_void, datasize: c_int, geometry: [*c]?*FMOD_GEOMETRY) FMOD_RESULT;
pub extern fn FMOD_System_GetGeometryOcclusion(system: ?*FMOD_SYSTEM, listener: [*c]const FMOD_VECTOR, source: [*c]const FMOD_VECTOR, direct: [*c]f32, reverb: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_System_SetNetworkProxy(system: ?*FMOD_SYSTEM, proxy: [*c]const u8) FMOD_RESULT;
pub extern fn FMOD_System_GetNetworkProxy(system: ?*FMOD_SYSTEM, proxy: [*c]u8, proxylen: c_int) FMOD_RESULT;
pub extern fn FMOD_System_SetNetworkTimeout(system: ?*FMOD_SYSTEM, timeout: c_int) FMOD_RESULT;
pub extern fn FMOD_System_GetNetworkTimeout(system: ?*FMOD_SYSTEM, timeout: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_System_SetUserData(system: ?*FMOD_SYSTEM, userdata: ?*c_void) FMOD_RESULT;
pub extern fn FMOD_System_GetUserData(system: ?*FMOD_SYSTEM, userdata: [*c]?*c_void) FMOD_RESULT;
pub extern fn FMOD_Sound_Release(sound: ?*FMOD_SOUND) FMOD_RESULT;
pub extern fn FMOD_Sound_GetSystemObject(sound: ?*FMOD_SOUND, system: [*c]?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_Sound_Lock(sound: ?*FMOD_SOUND, offset: c_uint, length: c_uint, ptr1: [*c]?*c_void, ptr2: [*c]?*c_void, len1: [*c]c_uint, len2: [*c]c_uint) FMOD_RESULT;
pub extern fn FMOD_Sound_Unlock(sound: ?*FMOD_SOUND, ptr1: ?*c_void, ptr2: ?*c_void, len1: c_uint, len2: c_uint) FMOD_RESULT;
pub extern fn FMOD_Sound_SetDefaults(sound: ?*FMOD_SOUND, frequency: f32, priority: c_int) FMOD_RESULT;
pub extern fn FMOD_Sound_GetDefaults(sound: ?*FMOD_SOUND, frequency: [*c]f32, priority: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Sound_Set3DMinMaxDistance(sound: ?*FMOD_SOUND, min: f32, max: f32) FMOD_RESULT;
pub extern fn FMOD_Sound_Get3DMinMaxDistance(sound: ?*FMOD_SOUND, min: [*c]f32, max: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Sound_Set3DConeSettings(sound: ?*FMOD_SOUND, insideconeangle: f32, outsideconeangle: f32, outsidevolume: f32) FMOD_RESULT;
pub extern fn FMOD_Sound_Get3DConeSettings(sound: ?*FMOD_SOUND, insideconeangle: [*c]f32, outsideconeangle: [*c]f32, outsidevolume: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Sound_Set3DCustomRolloff(sound: ?*FMOD_SOUND, points: [*c]FMOD_VECTOR, numpoints: c_int) FMOD_RESULT;
pub extern fn FMOD_Sound_Get3DCustomRolloff(sound: ?*FMOD_SOUND, points: [*c][*c]FMOD_VECTOR, numpoints: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Sound_GetSubSound(sound: ?*FMOD_SOUND, index: c_int, subsound: [*c]?*FMOD_SOUND) FMOD_RESULT;
pub extern fn FMOD_Sound_GetSubSoundParent(sound: ?*FMOD_SOUND, parentsound: [*c]?*FMOD_SOUND) FMOD_RESULT;
pub extern fn FMOD_Sound_GetName(sound: ?*FMOD_SOUND, name: [*c]u8, namelen: c_int) FMOD_RESULT;
pub extern fn FMOD_Sound_GetLength(sound: ?*FMOD_SOUND, length: [*c]c_uint, lengthtype: FMOD_TIMEUNIT) FMOD_RESULT;
pub extern fn FMOD_Sound_GetFormat(sound: ?*FMOD_SOUND, type: [*c]FMOD_SOUND_TYPE, format: [*c]FMOD_SOUND_FORMAT, channels: [*c]c_int, bits: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Sound_GetNumSubSounds(sound: ?*FMOD_SOUND, numsubsounds: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Sound_GetNumTags(sound: ?*FMOD_SOUND, numtags: [*c]c_int, numtagsupdated: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Sound_GetTag(sound: ?*FMOD_SOUND, name: [*c]const u8, index: c_int, tag: [*c]FMOD_TAG) FMOD_RESULT;
pub extern fn FMOD_Sound_GetOpenState(sound: ?*FMOD_SOUND, openstate: [*c]FMOD_OPENSTATE, percentbuffered: [*c]c_uint, starving: [*c]FMOD_BOOL, diskbusy: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Sound_ReadData(sound: ?*FMOD_SOUND, buffer: ?*c_void, length: c_uint, read: [*c]c_uint) FMOD_RESULT;
pub extern fn FMOD_Sound_SeekData(sound: ?*FMOD_SOUND, pcm: c_uint) FMOD_RESULT;
pub extern fn FMOD_Sound_SetSoundGroup(sound: ?*FMOD_SOUND, soundgroup: ?*FMOD_SOUNDGROUP) FMOD_RESULT;
pub extern fn FMOD_Sound_GetSoundGroup(sound: ?*FMOD_SOUND, soundgroup: [*c]?*FMOD_SOUNDGROUP) FMOD_RESULT;
pub extern fn FMOD_Sound_GetNumSyncPoints(sound: ?*FMOD_SOUND, numsyncpoints: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Sound_GetSyncPoint(sound: ?*FMOD_SOUND, index: c_int, point: [*c]?*FMOD_SYNCPOINT) FMOD_RESULT;
pub extern fn FMOD_Sound_GetSyncPointInfo(sound: ?*FMOD_SOUND, point: ?*FMOD_SYNCPOINT, name: [*c]u8, namelen: c_int, offset: [*c]c_uint, offsettype: FMOD_TIMEUNIT) FMOD_RESULT;
pub extern fn FMOD_Sound_AddSyncPoint(sound: ?*FMOD_SOUND, offset: c_uint, offsettype: FMOD_TIMEUNIT, name: [*c]const u8, point: [*c]?*FMOD_SYNCPOINT) FMOD_RESULT;
pub extern fn FMOD_Sound_DeleteSyncPoint(sound: ?*FMOD_SOUND, point: ?*FMOD_SYNCPOINT) FMOD_RESULT;
pub extern fn FMOD_Sound_SetMode(sound: ?*FMOD_SOUND, mode: FMOD_MODE) FMOD_RESULT;
pub extern fn FMOD_Sound_GetMode(sound: ?*FMOD_SOUND, mode: [*c]FMOD_MODE) FMOD_RESULT;
pub extern fn FMOD_Sound_SetLoopCount(sound: ?*FMOD_SOUND, loopcount: c_int) FMOD_RESULT;
pub extern fn FMOD_Sound_GetLoopCount(sound: ?*FMOD_SOUND, loopcount: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Sound_SetLoopPoints(sound: ?*FMOD_SOUND, loopstart: c_uint, loopstarttype: FMOD_TIMEUNIT, loopend: c_uint, loopendtype: FMOD_TIMEUNIT) FMOD_RESULT;
pub extern fn FMOD_Sound_GetLoopPoints(sound: ?*FMOD_SOUND, loopstart: [*c]c_uint, loopstarttype: FMOD_TIMEUNIT, loopend: [*c]c_uint, loopendtype: FMOD_TIMEUNIT) FMOD_RESULT;
pub extern fn FMOD_Sound_GetMusicNumChannels(sound: ?*FMOD_SOUND, numchannels: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Sound_SetMusicChannelVolume(sound: ?*FMOD_SOUND, channel: c_int, volume: f32) FMOD_RESULT;
pub extern fn FMOD_Sound_GetMusicChannelVolume(sound: ?*FMOD_SOUND, channel: c_int, volume: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Sound_SetMusicSpeed(sound: ?*FMOD_SOUND, speed: f32) FMOD_RESULT;
pub extern fn FMOD_Sound_GetMusicSpeed(sound: ?*FMOD_SOUND, speed: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Sound_SetUserData(sound: ?*FMOD_SOUND, userdata: ?*c_void) FMOD_RESULT;
pub extern fn FMOD_Sound_GetUserData(sound: ?*FMOD_SOUND, userdata: [*c]?*c_void) FMOD_RESULT;
pub extern fn FMOD_Channel_GetSystemObject(channel: ?*FMOD_CHANNEL, system: [*c]?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_Channel_Stop(channel: ?*FMOD_CHANNEL) FMOD_RESULT;
pub extern fn FMOD_Channel_SetPaused(channel: ?*FMOD_CHANNEL, paused: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Channel_GetPaused(channel: ?*FMOD_CHANNEL, paused: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Channel_SetVolume(channel: ?*FMOD_CHANNEL, volume: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_GetVolume(channel: ?*FMOD_CHANNEL, volume: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_SetVolumeRamp(channel: ?*FMOD_CHANNEL, ramp: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Channel_GetVolumeRamp(channel: ?*FMOD_CHANNEL, ramp: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Channel_GetAudibility(channel: ?*FMOD_CHANNEL, audibility: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_SetPitch(channel: ?*FMOD_CHANNEL, pitch: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_GetPitch(channel: ?*FMOD_CHANNEL, pitch: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_SetMute(channel: ?*FMOD_CHANNEL, mute: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Channel_GetMute(channel: ?*FMOD_CHANNEL, mute: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Channel_SetReverbProperties(channel: ?*FMOD_CHANNEL, instance: c_int, wet: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_GetReverbProperties(channel: ?*FMOD_CHANNEL, instance: c_int, wet: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_SetLowPassGain(channel: ?*FMOD_CHANNEL, gain: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_GetLowPassGain(channel: ?*FMOD_CHANNEL, gain: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_SetMode(channel: ?*FMOD_CHANNEL, mode: FMOD_MODE) FMOD_RESULT;
pub extern fn FMOD_Channel_GetMode(channel: ?*FMOD_CHANNEL, mode: [*c]FMOD_MODE) FMOD_RESULT;
pub extern fn FMOD_Channel_SetCallback(channel: ?*FMOD_CHANNEL, callback: FMOD_CHANNELCONTROL_CALLBACK) FMOD_RESULT;
pub extern fn FMOD_Channel_IsPlaying(channel: ?*FMOD_CHANNEL, isplaying: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Channel_SetPan(channel: ?*FMOD_CHANNEL, pan: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_SetMixLevelsOutput(channel: ?*FMOD_CHANNEL, frontleft: f32, frontright: f32, center: f32, lfe: f32, surroundleft: f32, surroundright: f32, backleft: f32, backright: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_SetMixLevelsInput(channel: ?*FMOD_CHANNEL, levels: [*c]f32, numlevels: c_int) FMOD_RESULT;
pub extern fn FMOD_Channel_SetMixMatrix(channel: ?*FMOD_CHANNEL, matrix: [*c]f32, outchannels: c_int, inchannels: c_int, inchannel_hop: c_int) FMOD_RESULT;
pub extern fn FMOD_Channel_GetMixMatrix(channel: ?*FMOD_CHANNEL, matrix: [*c]f32, outchannels: [*c]c_int, inchannels: [*c]c_int, inchannel_hop: c_int) FMOD_RESULT;
pub extern fn FMOD_Channel_GetDSPClock(channel: ?*FMOD_CHANNEL, dspclock: [*c]c_ulonglong, parentclock: [*c]c_ulonglong) FMOD_RESULT;
pub extern fn FMOD_Channel_SetDelay(channel: ?*FMOD_CHANNEL, dspclock_start: c_ulonglong, dspclock_end: c_ulonglong, stopchannels: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Channel_GetDelay(channel: ?*FMOD_CHANNEL, dspclock_start: [*c]c_ulonglong, dspclock_end: [*c]c_ulonglong, stopchannels: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Channel_AddFadePoint(channel: ?*FMOD_CHANNEL, dspclock: c_ulonglong, volume: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_SetFadePointRamp(channel: ?*FMOD_CHANNEL, dspclock: c_ulonglong, volume: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_RemoveFadePoints(channel: ?*FMOD_CHANNEL, dspclock_start: c_ulonglong, dspclock_end: c_ulonglong) FMOD_RESULT;
pub extern fn FMOD_Channel_GetFadePoints(channel: ?*FMOD_CHANNEL, numpoints: [*c]c_uint, point_dspclock: [*c]c_ulonglong, point_volume: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_GetDSP(channel: ?*FMOD_CHANNEL, index: c_int, dsp: [*c]?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_Channel_AddDSP(channel: ?*FMOD_CHANNEL, index: c_int, dsp: ?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_Channel_RemoveDSP(channel: ?*FMOD_CHANNEL, dsp: ?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_Channel_GetNumDSPs(channel: ?*FMOD_CHANNEL, numdsps: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Channel_SetDSPIndex(channel: ?*FMOD_CHANNEL, dsp: ?*FMOD_DSP, index: c_int) FMOD_RESULT;
pub extern fn FMOD_Channel_GetDSPIndex(channel: ?*FMOD_CHANNEL, dsp: ?*FMOD_DSP, index: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Channel_Set3DAttributes(channel: ?*FMOD_CHANNEL, pos: [*c]const FMOD_VECTOR, vel: [*c]const FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_Channel_Get3DAttributes(channel: ?*FMOD_CHANNEL, pos: [*c]FMOD_VECTOR, vel: [*c]FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_Channel_Set3DMinMaxDistance(channel: ?*FMOD_CHANNEL, mindistance: f32, maxdistance: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Get3DMinMaxDistance(channel: ?*FMOD_CHANNEL, mindistance: [*c]f32, maxdistance: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Set3DConeSettings(channel: ?*FMOD_CHANNEL, insideconeangle: f32, outsideconeangle: f32, outsidevolume: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Get3DConeSettings(channel: ?*FMOD_CHANNEL, insideconeangle: [*c]f32, outsideconeangle: [*c]f32, outsidevolume: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Set3DConeOrientation(channel: ?*FMOD_CHANNEL, orientation: [*c]FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_Channel_Get3DConeOrientation(channel: ?*FMOD_CHANNEL, orientation: [*c]FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_Channel_Set3DCustomRolloff(channel: ?*FMOD_CHANNEL, points: [*c]FMOD_VECTOR, numpoints: c_int) FMOD_RESULT;
pub extern fn FMOD_Channel_Get3DCustomRolloff(channel: ?*FMOD_CHANNEL, points: [*c][*c]FMOD_VECTOR, numpoints: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Channel_Set3DOcclusion(channel: ?*FMOD_CHANNEL, directocclusion: f32, reverbocclusion: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Get3DOcclusion(channel: ?*FMOD_CHANNEL, directocclusion: [*c]f32, reverbocclusion: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Set3DSpread(channel: ?*FMOD_CHANNEL, angle: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Get3DSpread(channel: ?*FMOD_CHANNEL, angle: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Set3DLevel(channel: ?*FMOD_CHANNEL, level: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Get3DLevel(channel: ?*FMOD_CHANNEL, level: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Set3DDopplerLevel(channel: ?*FMOD_CHANNEL, level: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Get3DDopplerLevel(channel: ?*FMOD_CHANNEL, level: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Set3DDistanceFilter(channel: ?*FMOD_CHANNEL, custom: FMOD_BOOL, customLevel: f32, centerFreq: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_Get3DDistanceFilter(channel: ?*FMOD_CHANNEL, custom: [*c]FMOD_BOOL, customLevel: [*c]f32, centerFreq: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_SetUserData(channel: ?*FMOD_CHANNEL, userdata: ?*c_void) FMOD_RESULT;
pub extern fn FMOD_Channel_GetUserData(channel: ?*FMOD_CHANNEL, userdata: [*c]?*c_void) FMOD_RESULT;
pub extern fn FMOD_Channel_SetFrequency(channel: ?*FMOD_CHANNEL, frequency: f32) FMOD_RESULT;
pub extern fn FMOD_Channel_GetFrequency(channel: ?*FMOD_CHANNEL, frequency: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Channel_SetPriority(channel: ?*FMOD_CHANNEL, priority: c_int) FMOD_RESULT;
pub extern fn FMOD_Channel_GetPriority(channel: ?*FMOD_CHANNEL, priority: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Channel_SetPosition(channel: ?*FMOD_CHANNEL, position: c_uint, postype: FMOD_TIMEUNIT) FMOD_RESULT;
pub extern fn FMOD_Channel_GetPosition(channel: ?*FMOD_CHANNEL, position: [*c]c_uint, postype: FMOD_TIMEUNIT) FMOD_RESULT;
pub extern fn FMOD_Channel_SetChannelGroup(channel: ?*FMOD_CHANNEL, channelgroup: ?*FMOD_CHANNELGROUP) FMOD_RESULT;
pub extern fn FMOD_Channel_GetChannelGroup(channel: ?*FMOD_CHANNEL, channelgroup: [*c]?*FMOD_CHANNELGROUP) FMOD_RESULT;
pub extern fn FMOD_Channel_SetLoopCount(channel: ?*FMOD_CHANNEL, loopcount: c_int) FMOD_RESULT;
pub extern fn FMOD_Channel_GetLoopCount(channel: ?*FMOD_CHANNEL, loopcount: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Channel_SetLoopPoints(channel: ?*FMOD_CHANNEL, loopstart: c_uint, loopstarttype: FMOD_TIMEUNIT, loopend: c_uint, loopendtype: FMOD_TIMEUNIT) FMOD_RESULT;
pub extern fn FMOD_Channel_GetLoopPoints(channel: ?*FMOD_CHANNEL, loopstart: [*c]c_uint, loopstarttype: FMOD_TIMEUNIT, loopend: [*c]c_uint, loopendtype: FMOD_TIMEUNIT) FMOD_RESULT;
pub extern fn FMOD_Channel_IsVirtual(channel: ?*FMOD_CHANNEL, isvirtual: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Channel_GetCurrentSound(channel: ?*FMOD_CHANNEL, sound: [*c]?*FMOD_SOUND) FMOD_RESULT;
pub extern fn FMOD_Channel_GetIndex(channel: ?*FMOD_CHANNEL, index: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetSystemObject(channelgroup: ?*FMOD_CHANNELGROUP, system: [*c]?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Stop(channelgroup: ?*FMOD_CHANNELGROUP) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetPaused(channelgroup: ?*FMOD_CHANNELGROUP, paused: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetPaused(channelgroup: ?*FMOD_CHANNELGROUP, paused: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetVolume(channelgroup: ?*FMOD_CHANNELGROUP, volume: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetVolume(channelgroup: ?*FMOD_CHANNELGROUP, volume: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetVolumeRamp(channelgroup: ?*FMOD_CHANNELGROUP, ramp: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetVolumeRamp(channelgroup: ?*FMOD_CHANNELGROUP, ramp: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetAudibility(channelgroup: ?*FMOD_CHANNELGROUP, audibility: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetPitch(channelgroup: ?*FMOD_CHANNELGROUP, pitch: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetPitch(channelgroup: ?*FMOD_CHANNELGROUP, pitch: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetMute(channelgroup: ?*FMOD_CHANNELGROUP, mute: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetMute(channelgroup: ?*FMOD_CHANNELGROUP, mute: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetReverbProperties(channelgroup: ?*FMOD_CHANNELGROUP, instance: c_int, wet: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetReverbProperties(channelgroup: ?*FMOD_CHANNELGROUP, instance: c_int, wet: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetLowPassGain(channelgroup: ?*FMOD_CHANNELGROUP, gain: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetLowPassGain(channelgroup: ?*FMOD_CHANNELGROUP, gain: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetMode(channelgroup: ?*FMOD_CHANNELGROUP, mode: FMOD_MODE) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetMode(channelgroup: ?*FMOD_CHANNELGROUP, mode: [*c]FMOD_MODE) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetCallback(channelgroup: ?*FMOD_CHANNELGROUP, callback: FMOD_CHANNELCONTROL_CALLBACK) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_IsPlaying(channelgroup: ?*FMOD_CHANNELGROUP, isplaying: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetPan(channelgroup: ?*FMOD_CHANNELGROUP, pan: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetMixLevelsOutput(channelgroup: ?*FMOD_CHANNELGROUP, frontleft: f32, frontright: f32, center: f32, lfe: f32, surroundleft: f32, surroundright: f32, backleft: f32, backright: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetMixLevelsInput(channelgroup: ?*FMOD_CHANNELGROUP, levels: [*c]f32, numlevels: c_int) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetMixMatrix(channelgroup: ?*FMOD_CHANNELGROUP, matrix: [*c]f32, outchannels: c_int, inchannels: c_int, inchannel_hop: c_int) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetMixMatrix(channelgroup: ?*FMOD_CHANNELGROUP, matrix: [*c]f32, outchannels: [*c]c_int, inchannels: [*c]c_int, inchannel_hop: c_int) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetDSPClock(channelgroup: ?*FMOD_CHANNELGROUP, dspclock: [*c]c_ulonglong, parentclock: [*c]c_ulonglong) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetDelay(channelgroup: ?*FMOD_CHANNELGROUP, dspclock_start: c_ulonglong, dspclock_end: c_ulonglong, stopchannels: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetDelay(channelgroup: ?*FMOD_CHANNELGROUP, dspclock_start: [*c]c_ulonglong, dspclock_end: [*c]c_ulonglong, stopchannels: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_AddFadePoint(channelgroup: ?*FMOD_CHANNELGROUP, dspclock: c_ulonglong, volume: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetFadePointRamp(channelgroup: ?*FMOD_CHANNELGROUP, dspclock: c_ulonglong, volume: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_RemoveFadePoints(channelgroup: ?*FMOD_CHANNELGROUP, dspclock_start: c_ulonglong, dspclock_end: c_ulonglong) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetFadePoints(channelgroup: ?*FMOD_CHANNELGROUP, numpoints: [*c]c_uint, point_dspclock: [*c]c_ulonglong, point_volume: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetDSP(channelgroup: ?*FMOD_CHANNELGROUP, index: c_int, dsp: [*c]?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_AddDSP(channelgroup: ?*FMOD_CHANNELGROUP, index: c_int, dsp: ?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_RemoveDSP(channelgroup: ?*FMOD_CHANNELGROUP, dsp: ?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetNumDSPs(channelgroup: ?*FMOD_CHANNELGROUP, numdsps: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetDSPIndex(channelgroup: ?*FMOD_CHANNELGROUP, dsp: ?*FMOD_DSP, index: c_int) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetDSPIndex(channelgroup: ?*FMOD_CHANNELGROUP, dsp: ?*FMOD_DSP, index: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Set3DAttributes(channelgroup: ?*FMOD_CHANNELGROUP, pos: [*c]const FMOD_VECTOR, vel: [*c]const FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Get3DAttributes(channelgroup: ?*FMOD_CHANNELGROUP, pos: [*c]FMOD_VECTOR, vel: [*c]FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Set3DMinMaxDistance(channelgroup: ?*FMOD_CHANNELGROUP, mindistance: f32, maxdistance: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Get3DMinMaxDistance(channelgroup: ?*FMOD_CHANNELGROUP, mindistance: [*c]f32, maxdistance: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Set3DConeSettings(channelgroup: ?*FMOD_CHANNELGROUP, insideconeangle: f32, outsideconeangle: f32, outsidevolume: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Get3DConeSettings(channelgroup: ?*FMOD_CHANNELGROUP, insideconeangle: [*c]f32, outsideconeangle: [*c]f32, outsidevolume: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Set3DConeOrientation(channelgroup: ?*FMOD_CHANNELGROUP, orientation: [*c]FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Get3DConeOrientation(channelgroup: ?*FMOD_CHANNELGROUP, orientation: [*c]FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Set3DCustomRolloff(channelgroup: ?*FMOD_CHANNELGROUP, points: [*c]FMOD_VECTOR, numpoints: c_int) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Get3DCustomRolloff(channelgroup: ?*FMOD_CHANNELGROUP, points: [*c][*c]FMOD_VECTOR, numpoints: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Set3DOcclusion(channelgroup: ?*FMOD_CHANNELGROUP, directocclusion: f32, reverbocclusion: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Get3DOcclusion(channelgroup: ?*FMOD_CHANNELGROUP, directocclusion: [*c]f32, reverbocclusion: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Set3DSpread(channelgroup: ?*FMOD_CHANNELGROUP, angle: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Get3DSpread(channelgroup: ?*FMOD_CHANNELGROUP, angle: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Set3DLevel(channelgroup: ?*FMOD_CHANNELGROUP, level: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Get3DLevel(channelgroup: ?*FMOD_CHANNELGROUP, level: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Set3DDopplerLevel(channelgroup: ?*FMOD_CHANNELGROUP, level: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Get3DDopplerLevel(channelgroup: ?*FMOD_CHANNELGROUP, level: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Set3DDistanceFilter(channelgroup: ?*FMOD_CHANNELGROUP, custom: FMOD_BOOL, customLevel: f32, centerFreq: f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Get3DDistanceFilter(channelgroup: ?*FMOD_CHANNELGROUP, custom: [*c]FMOD_BOOL, customLevel: [*c]f32, centerFreq: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_SetUserData(channelgroup: ?*FMOD_CHANNELGROUP, userdata: ?*c_void) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetUserData(channelgroup: ?*FMOD_CHANNELGROUP, userdata: [*c]?*c_void) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_Release(channelgroup: ?*FMOD_CHANNELGROUP) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_AddGroup(channelgroup: ?*FMOD_CHANNELGROUP, group: ?*FMOD_CHANNELGROUP, propagatedspclock: FMOD_BOOL, connection: [*c]?*FMOD_DSPCONNECTION) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetNumGroups(channelgroup: ?*FMOD_CHANNELGROUP, numgroups: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetGroup(channelgroup: ?*FMOD_CHANNELGROUP, index: c_int, group: [*c]?*FMOD_CHANNELGROUP) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetParentGroup(channelgroup: ?*FMOD_CHANNELGROUP, group: [*c]?*FMOD_CHANNELGROUP) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetName(channelgroup: ?*FMOD_CHANNELGROUP, name: [*c]u8, namelen: c_int) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetNumChannels(channelgroup: ?*FMOD_CHANNELGROUP, numchannels: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_ChannelGroup_GetChannel(channelgroup: ?*FMOD_CHANNELGROUP, index: c_int, channel: [*c]?*FMOD_CHANNEL) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_Release(soundgroup: ?*FMOD_SOUNDGROUP) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_GetSystemObject(soundgroup: ?*FMOD_SOUNDGROUP, system: [*c]?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_SetMaxAudible(soundgroup: ?*FMOD_SOUNDGROUP, maxaudible: c_int) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_GetMaxAudible(soundgroup: ?*FMOD_SOUNDGROUP, maxaudible: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_SetMaxAudibleBehavior(soundgroup: ?*FMOD_SOUNDGROUP, behavior: FMOD_SOUNDGROUP_BEHAVIOR) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_GetMaxAudibleBehavior(soundgroup: ?*FMOD_SOUNDGROUP, behavior: [*c]FMOD_SOUNDGROUP_BEHAVIOR) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_SetMuteFadeSpeed(soundgroup: ?*FMOD_SOUNDGROUP, speed: f32) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_GetMuteFadeSpeed(soundgroup: ?*FMOD_SOUNDGROUP, speed: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_SetVolume(soundgroup: ?*FMOD_SOUNDGROUP, volume: f32) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_GetVolume(soundgroup: ?*FMOD_SOUNDGROUP, volume: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_Stop(soundgroup: ?*FMOD_SOUNDGROUP) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_GetName(soundgroup: ?*FMOD_SOUNDGROUP, name: [*c]u8, namelen: c_int) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_GetNumSounds(soundgroup: ?*FMOD_SOUNDGROUP, numsounds: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_GetSound(soundgroup: ?*FMOD_SOUNDGROUP, index: c_int, sound: [*c]?*FMOD_SOUND) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_GetNumPlaying(soundgroup: ?*FMOD_SOUNDGROUP, numplaying: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_SetUserData(soundgroup: ?*FMOD_SOUNDGROUP, userdata: ?*c_void) FMOD_RESULT;
pub extern fn FMOD_SoundGroup_GetUserData(soundgroup: ?*FMOD_SOUNDGROUP, userdata: [*c]?*c_void) FMOD_RESULT;
pub extern fn FMOD_DSP_Release(dsp: ?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_DSP_GetSystemObject(dsp: ?*FMOD_DSP, system: [*c]?*FMOD_SYSTEM) FMOD_RESULT;
pub extern fn FMOD_DSP_AddInput(dsp: ?*FMOD_DSP, input: ?*FMOD_DSP, connection: [*c]?*FMOD_DSPCONNECTION, type: FMOD_DSPCONNECTION_TYPE) FMOD_RESULT;
pub extern fn FMOD_DSP_DisconnectFrom(dsp: ?*FMOD_DSP, target: ?*FMOD_DSP, connection: ?*FMOD_DSPCONNECTION) FMOD_RESULT;
pub extern fn FMOD_DSP_DisconnectAll(dsp: ?*FMOD_DSP, inputs: FMOD_BOOL, outputs: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_DSP_GetNumInputs(dsp: ?*FMOD_DSP, numinputs: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_DSP_GetNumOutputs(dsp: ?*FMOD_DSP, numoutputs: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_DSP_GetInput(dsp: ?*FMOD_DSP, index: c_int, input: [*c]?*FMOD_DSP, inputconnection: [*c]?*FMOD_DSPCONNECTION) FMOD_RESULT;
pub extern fn FMOD_DSP_GetOutput(dsp: ?*FMOD_DSP, index: c_int, output: [*c]?*FMOD_DSP, outputconnection: [*c]?*FMOD_DSPCONNECTION) FMOD_RESULT;
pub extern fn FMOD_DSP_SetActive(dsp: ?*FMOD_DSP, active: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_DSP_GetActive(dsp: ?*FMOD_DSP, active: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_DSP_SetBypass(dsp: ?*FMOD_DSP, bypass: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_DSP_GetBypass(dsp: ?*FMOD_DSP, bypass: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_DSP_SetWetDryMix(dsp: ?*FMOD_DSP, prewet: f32, postwet: f32, dry: f32) FMOD_RESULT;
pub extern fn FMOD_DSP_GetWetDryMix(dsp: ?*FMOD_DSP, prewet: [*c]f32, postwet: [*c]f32, dry: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_DSP_SetChannelFormat(dsp: ?*FMOD_DSP, channelmask: FMOD_CHANNELMASK, numchannels: c_int, source_speakermode: FMOD_SPEAKERMODE) FMOD_RESULT;
pub extern fn FMOD_DSP_GetChannelFormat(dsp: ?*FMOD_DSP, channelmask: [*c]FMOD_CHANNELMASK, numchannels: [*c]c_int, source_speakermode: [*c]FMOD_SPEAKERMODE) FMOD_RESULT;
pub extern fn FMOD_DSP_GetOutputChannelFormat(dsp: ?*FMOD_DSP, inmask: FMOD_CHANNELMASK, inchannels: c_int, inspeakermode: FMOD_SPEAKERMODE, outmask: [*c]FMOD_CHANNELMASK, outchannels: [*c]c_int, outspeakermode: [*c]FMOD_SPEAKERMODE) FMOD_RESULT;
pub extern fn FMOD_DSP_Reset(dsp: ?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_DSP_SetParameterFloat(dsp: ?*FMOD_DSP, index: c_int, value: f32) FMOD_RESULT;
pub extern fn FMOD_DSP_SetParameterInt(dsp: ?*FMOD_DSP, index: c_int, value: c_int) FMOD_RESULT;
pub extern fn FMOD_DSP_SetParameterBool(dsp: ?*FMOD_DSP, index: c_int, value: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_DSP_SetParameterData(dsp: ?*FMOD_DSP, index: c_int, data: ?*c_void, length: c_uint) FMOD_RESULT;
pub extern fn FMOD_DSP_GetParameterFloat(dsp: ?*FMOD_DSP, index: c_int, value: [*c]f32, valuestr: [*c]u8, valuestrlen: c_int) FMOD_RESULT;
pub extern fn FMOD_DSP_GetParameterInt(dsp: ?*FMOD_DSP, index: c_int, value: [*c]c_int, valuestr: [*c]u8, valuestrlen: c_int) FMOD_RESULT;
pub extern fn FMOD_DSP_GetParameterBool(dsp: ?*FMOD_DSP, index: c_int, value: [*c]FMOD_BOOL, valuestr: [*c]u8, valuestrlen: c_int) FMOD_RESULT;
pub extern fn FMOD_DSP_GetParameterData(dsp: ?*FMOD_DSP, index: c_int, data: [*c]?*c_void, length: [*c]c_uint, valuestr: [*c]u8, valuestrlen: c_int) FMOD_RESULT;
pub extern fn FMOD_DSP_GetNumParameters(dsp: ?*FMOD_DSP, numparams: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_DSP_GetParameterInfo(dsp: ?*FMOD_DSP, index: c_int, desc: [*c][*c]FMOD_DSP_PARAMETER_DESC) FMOD_RESULT;
pub extern fn FMOD_DSP_GetDataParameterIndex(dsp: ?*FMOD_DSP, datatype: c_int, index: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_DSP_ShowConfigDialog(dsp: ?*FMOD_DSP, hwnd: ?*c_void, show: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_DSP_GetInfo(dsp: ?*FMOD_DSP, name: [*c]u8, version: [*c]c_uint, channels: [*c]c_int, configwidth: [*c]c_int, configheight: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_DSP_GetType(dsp: ?*FMOD_DSP, type: [*c]FMOD_DSP_TYPE) FMOD_RESULT;
pub extern fn FMOD_DSP_GetIdle(dsp: ?*FMOD_DSP, idle: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_DSP_SetUserData(dsp: ?*FMOD_DSP, userdata: ?*c_void) FMOD_RESULT;
pub extern fn FMOD_DSP_GetUserData(dsp: ?*FMOD_DSP, userdata: [*c]?*c_void) FMOD_RESULT;
pub extern fn FMOD_DSP_SetMeteringEnabled(dsp: ?*FMOD_DSP, inputEnabled: FMOD_BOOL, outputEnabled: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_DSP_GetMeteringEnabled(dsp: ?*FMOD_DSP, inputEnabled: [*c]FMOD_BOOL, outputEnabled: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_DSP_GetMeteringInfo(dsp: ?*FMOD_DSP, inputInfo: [*c]FMOD_DSP_METERING_INFO, outputInfo: [*c]FMOD_DSP_METERING_INFO) FMOD_RESULT;
pub extern fn FMOD_DSP_GetCPUUsage(dsp: ?*FMOD_DSP, exclusive: [*c]c_uint, inclusive: [*c]c_uint) FMOD_RESULT;
pub extern fn FMOD_DSPConnection_GetInput(dspconnection: ?*FMOD_DSPCONNECTION, input: [*c]?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_DSPConnection_GetOutput(dspconnection: ?*FMOD_DSPCONNECTION, output: [*c]?*FMOD_DSP) FMOD_RESULT;
pub extern fn FMOD_DSPConnection_SetMix(dspconnection: ?*FMOD_DSPCONNECTION, volume: f32) FMOD_RESULT;
pub extern fn FMOD_DSPConnection_GetMix(dspconnection: ?*FMOD_DSPCONNECTION, volume: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_DSPConnection_SetMixMatrix(dspconnection: ?*FMOD_DSPCONNECTION, matrix: [*c]f32, outchannels: c_int, inchannels: c_int, inchannel_hop: c_int) FMOD_RESULT;
pub extern fn FMOD_DSPConnection_GetMixMatrix(dspconnection: ?*FMOD_DSPCONNECTION, matrix: [*c]f32, outchannels: [*c]c_int, inchannels: [*c]c_int, inchannel_hop: c_int) FMOD_RESULT;
pub extern fn FMOD_DSPConnection_GetType(dspconnection: ?*FMOD_DSPCONNECTION, type: [*c]FMOD_DSPCONNECTION_TYPE) FMOD_RESULT;
pub extern fn FMOD_DSPConnection_SetUserData(dspconnection: ?*FMOD_DSPCONNECTION, userdata: ?*c_void) FMOD_RESULT;
pub extern fn FMOD_DSPConnection_GetUserData(dspconnection: ?*FMOD_DSPCONNECTION, userdata: [*c]?*c_void) FMOD_RESULT;
pub extern fn FMOD_Geometry_Release(geometry: ?*FMOD_GEOMETRY) FMOD_RESULT;
pub extern fn FMOD_Geometry_AddPolygon(geometry: ?*FMOD_GEOMETRY, directocclusion: f32, reverbocclusion: f32, doublesided: FMOD_BOOL, numvertices: c_int, vertices: [*c]const FMOD_VECTOR, polygonindex: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Geometry_GetNumPolygons(geometry: ?*FMOD_GEOMETRY, numpolygons: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Geometry_GetMaxPolygons(geometry: ?*FMOD_GEOMETRY, maxpolygons: [*c]c_int, maxvertices: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Geometry_GetPolygonNumVertices(geometry: ?*FMOD_GEOMETRY, index: c_int, numvertices: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Geometry_SetPolygonVertex(geometry: ?*FMOD_GEOMETRY, index: c_int, vertexindex: c_int, vertex: [*c]const FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_Geometry_GetPolygonVertex(geometry: ?*FMOD_GEOMETRY, index: c_int, vertexindex: c_int, vertex: [*c]FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_Geometry_SetPolygonAttributes(geometry: ?*FMOD_GEOMETRY, index: c_int, directocclusion: f32, reverbocclusion: f32, doublesided: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Geometry_GetPolygonAttributes(geometry: ?*FMOD_GEOMETRY, index: c_int, directocclusion: [*c]f32, reverbocclusion: [*c]f32, doublesided: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Geometry_SetActive(geometry: ?*FMOD_GEOMETRY, active: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Geometry_GetActive(geometry: ?*FMOD_GEOMETRY, active: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Geometry_SetRotation(geometry: ?*FMOD_GEOMETRY, forward: [*c]const FMOD_VECTOR, up: [*c]const FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_Geometry_GetRotation(geometry: ?*FMOD_GEOMETRY, forward: [*c]FMOD_VECTOR, up: [*c]FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_Geometry_SetPosition(geometry: ?*FMOD_GEOMETRY, position: [*c]const FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_Geometry_GetPosition(geometry: ?*FMOD_GEOMETRY, position: [*c]FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_Geometry_SetScale(geometry: ?*FMOD_GEOMETRY, scale: [*c]const FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_Geometry_GetScale(geometry: ?*FMOD_GEOMETRY, scale: [*c]FMOD_VECTOR) FMOD_RESULT;
pub extern fn FMOD_Geometry_Save(geometry: ?*FMOD_GEOMETRY, data: ?*c_void, datasize: [*c]c_int) FMOD_RESULT;
pub extern fn FMOD_Geometry_SetUserData(geometry: ?*FMOD_GEOMETRY, userdata: ?*c_void) FMOD_RESULT;
pub extern fn FMOD_Geometry_GetUserData(geometry: ?*FMOD_GEOMETRY, userdata: [*c]?*c_void) FMOD_RESULT;
pub extern fn FMOD_Reverb3D_Release(reverb3d: ?*FMOD_REVERB3D) FMOD_RESULT;
pub extern fn FMOD_Reverb3D_Set3DAttributes(reverb3d: ?*FMOD_REVERB3D, position: [*c]const FMOD_VECTOR, mindistance: f32, maxdistance: f32) FMOD_RESULT;
pub extern fn FMOD_Reverb3D_Get3DAttributes(reverb3d: ?*FMOD_REVERB3D, position: [*c]FMOD_VECTOR, mindistance: [*c]f32, maxdistance: [*c]f32) FMOD_RESULT;
pub extern fn FMOD_Reverb3D_SetProperties(reverb3d: ?*FMOD_REVERB3D, properties: [*c]const FMOD_REVERB_PROPERTIES) FMOD_RESULT;
pub extern fn FMOD_Reverb3D_GetProperties(reverb3d: ?*FMOD_REVERB3D, properties: [*c]FMOD_REVERB_PROPERTIES) FMOD_RESULT;
pub extern fn FMOD_Reverb3D_SetActive(reverb3d: ?*FMOD_REVERB3D, active: FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Reverb3D_GetActive(reverb3d: ?*FMOD_REVERB3D, active: [*c]FMOD_BOOL) FMOD_RESULT;
pub extern fn FMOD_Reverb3D_SetUserData(reverb3d: ?*FMOD_REVERB3D, userdata: ?*c_void) FMOD_RESULT;
pub extern fn FMOD_Reverb3D_GetUserData(reverb3d: ?*FMOD_REVERB3D, userdata: [*c]?*c_void) FMOD_RESULT;

pub const FMOD_VERSION = 0x00020104;
pub const FMOD_DEBUG_LEVEL_NONE = 0x00000000;
pub const FMOD_DEBUG_LEVEL_ERROR = 0x00000001;
pub const FMOD_DEBUG_LEVEL_WARNING = 0x00000002;
pub const FMOD_DEBUG_LEVEL_LOG = 0x00000004;
pub const FMOD_DEBUG_TYPE_MEMORY = 0x00000100;
pub const FMOD_DEBUG_TYPE_FILE = 0x00000200;
pub const FMOD_DEBUG_TYPE_CODEC = 0x00000400;
pub const FMOD_DEBUG_TYPE_TRACE = 0x00000800;
pub const FMOD_DEBUG_DISPLAY_TIMESTAMPS = 0x00010000;
pub const FMOD_DEBUG_DISPLAY_LINENUMBERS = 0x00020000;
pub const FMOD_DEBUG_DISPLAY_THREAD = 0x00040000;
pub const FMOD_MEMORY_NORMAL = 0x00000000;
pub const FMOD_MEMORY_STREAM_FILE = 0x00000001;
pub const FMOD_MEMORY_STREAM_DECODE = 0x00000002;
pub const FMOD_MEMORY_SAMPLEDATA = 0x00000004;
pub const FMOD_MEMORY_DSP_BUFFER = 0x00000008;
pub const FMOD_MEMORY_PLUGIN = 0x00000010;
pub const FMOD_MEMORY_PERSISTENT = 0x00200000;
pub const FMOD_MEMORY_ALL = 0xFFFFFFFF;
pub const FMOD_INIT_NORMAL = 0x00000000;
pub const FMOD_INIT_STREAM_FROM_UPDATE = 0x00000001;
pub const FMOD_INIT_MIX_FROM_UPDATE = 0x00000002;
pub const FMOD_INIT_3D_RIGHTHANDED = 0x00000004;
pub const FMOD_INIT_CHANNEL_LOWPASS = 0x00000100;
pub const FMOD_INIT_CHANNEL_DISTANCEFILTER = 0x00000200;
pub const FMOD_INIT_PROFILE_ENABLE = 0x00010000;
pub const FMOD_INIT_VOL0_BECOMES_VIRTUAL = 0x00020000;
pub const FMOD_INIT_GEOMETRY_USECLOSEST = 0x00040000;
pub const FMOD_INIT_PREFER_DOLBY_DOWNMIX = 0x00080000;
pub const FMOD_INIT_THREAD_UNSAFE = 0x00100000;
pub const FMOD_INIT_PROFILE_METER_ALL = 0x00200000;
pub const FMOD_INIT_MEMORY_TRACKING = 0x00400000;
pub const FMOD_DRIVER_STATE_CONNECTED = 0x00000001;
pub const FMOD_DRIVER_STATE_DEFAULT = 0x00000002;
pub const FMOD_TIMEUNIT_MS = 0x00000001;
pub const FMOD_TIMEUNIT_PCM = 0x00000002;
pub const FMOD_TIMEUNIT_PCMBYTES = 0x00000004;
pub const FMOD_TIMEUNIT_RAWBYTES = 0x00000008;
pub const FMOD_TIMEUNIT_PCMFRACTION = 0x00000010;
pub const FMOD_TIMEUNIT_MODORDER = 0x00000100;
pub const FMOD_TIMEUNIT_MODROW = 0x00000200;
pub const FMOD_TIMEUNIT_MODPATTERN = 0x00000400;
pub const FMOD_SYSTEM_CALLBACK_DEVICELISTCHANGED = 0x00000001;
pub const FMOD_SYSTEM_CALLBACK_DEVICELOST = 0x00000002;
pub const FMOD_SYSTEM_CALLBACK_MEMORYALLOCATIONFAILED = 0x00000004;
pub const FMOD_SYSTEM_CALLBACK_THREADCREATED = 0x00000008;
pub const FMOD_SYSTEM_CALLBACK_BADDSPCONNECTION = 0x00000010;
pub const FMOD_SYSTEM_CALLBACK_PREMIX = 0x00000020;
pub const FMOD_SYSTEM_CALLBACK_POSTMIX = 0x00000040;
pub const FMOD_SYSTEM_CALLBACK_ERROR = 0x00000080;
pub const FMOD_SYSTEM_CALLBACK_MIDMIX = 0x00000100;
pub const FMOD_SYSTEM_CALLBACK_THREADDESTROYED = 0x00000200;
pub const FMOD_SYSTEM_CALLBACK_PREUPDATE = 0x00000400;
pub const FMOD_SYSTEM_CALLBACK_POSTUPDATE = 0x00000800;
pub const FMOD_SYSTEM_CALLBACK_RECORDLISTCHANGED = 0x00001000;
pub const FMOD_SYSTEM_CALLBACK_ALL = 0xFFFFFFFF;
pub const FMOD_DEFAULT = 0x00000000;
pub const FMOD_LOOP_OFF = 0x00000001;
pub const FMOD_LOOP_NORMAL = 0x00000002;
pub const FMOD_LOOP_BIDI = 0x00000004;
pub const FMOD_2D = 0x00000008;
pub const FMOD_3D = 0x00000010;
pub const FMOD_CREATESTREAM = 0x00000080;
pub const FMOD_CREATESAMPLE = 0x00000100;
pub const FMOD_CREATECOMPRESSEDSAMPLE = 0x00000200;
pub const FMOD_OPENUSER = 0x00000400;
pub const FMOD_OPENMEMORY = 0x00000800;
pub const FMOD_OPENMEMORY_POINT = 0x10000000;
pub const FMOD_OPENRAW = 0x00001000;
pub const FMOD_OPENONLY = 0x00002000;
pub const FMOD_ACCURATETIME = 0x00004000;
pub const FMOD_MPEGSEARCH = 0x00008000;
pub const FMOD_NONBLOCKING = 0x00010000;
pub const FMOD_UNIQUE = 0x00020000;
pub const FMOD_3D_HEADRELATIVE = 0x00040000;
pub const FMOD_3D_WORLDRELATIVE = 0x00080000;
pub const FMOD_3D_INVERSEROLLOFF = 0x00100000;
pub const FMOD_3D_LINEARROLLOFF = 0x00200000;
pub const FMOD_3D_LINEARSQUAREROLLOFF = 0x00400000;
pub const FMOD_3D_INVERSETAPEREDROLLOFF = 0x00800000;
pub const FMOD_3D_CUSTOMROLLOFF = 0x04000000;
pub const FMOD_3D_IGNOREGEOMETRY = 0x40000000;
pub const FMOD_IGNORETAGS = 0x02000000;
pub const FMOD_LOWMEM = 0x08000000;
pub const FMOD_VIRTUAL_PLAYFROMSTART = 0x80000000;
pub const FMOD_CHANNELMASK_FRONT_LEFT = 0x00000001;
pub const FMOD_CHANNELMASK_FRONT_RIGHT = 0x00000002;
pub const FMOD_CHANNELMASK_FRONT_CENTER = 0x00000004;
pub const FMOD_CHANNELMASK_LOW_FREQUENCY = 0x00000008;
pub const FMOD_CHANNELMASK_SURROUND_LEFT = 0x00000010;
pub const FMOD_CHANNELMASK_SURROUND_RIGHT = 0x00000020;
pub const FMOD_CHANNELMASK_BACK_LEFT = 0x00000040;
pub const FMOD_CHANNELMASK_BACK_RIGHT = 0x00000080;
pub const FMOD_CHANNELMASK_BACK_CENTER = 0x00000100;
pub const FMOD_CHANNELMASK_MONO = FMOD_CHANNELMASK_FRONT_LEFT;
pub const FMOD_CHANNELMASK_STEREO = FMOD_CHANNELMASK_FRONT_LEFT | FMOD_CHANNELMASK_FRONT_RIGHT;
pub const FMOD_CHANNELMASK_LRC = FMOD_CHANNELMASK_FRONT_LEFT | (FMOD_CHANNELMASK_FRONT_RIGHT | FMOD_CHANNELMASK_FRONT_CENTER);
pub const FMOD_CHANNELMASK_QUAD = FMOD_CHANNELMASK_FRONT_LEFT | (FMOD_CHANNELMASK_FRONT_RIGHT | (FMOD_CHANNELMASK_SURROUND_LEFT | FMOD_CHANNELMASK_SURROUND_RIGHT));
pub const FMOD_CHANNELMASK_SURROUND = FMOD_CHANNELMASK_FRONT_LEFT | (FMOD_CHANNELMASK_FRONT_RIGHT | (FMOD_CHANNELMASK_FRONT_CENTER | (FMOD_CHANNELMASK_SURROUND_LEFT | FMOD_CHANNELMASK_SURROUND_RIGHT)));
pub const FMOD_CHANNELMASK_5POINT1 = FMOD_CHANNELMASK_FRONT_LEFT | (FMOD_CHANNELMASK_FRONT_RIGHT | (FMOD_CHANNELMASK_FRONT_CENTER | (FMOD_CHANNELMASK_LOW_FREQUENCY | (FMOD_CHANNELMASK_SURROUND_LEFT | FMOD_CHANNELMASK_SURROUND_RIGHT))));
pub const FMOD_CHANNELMASK_5POINT1_REARS = FMOD_CHANNELMASK_FRONT_LEFT | (FMOD_CHANNELMASK_FRONT_RIGHT | (FMOD_CHANNELMASK_FRONT_CENTER | (FMOD_CHANNELMASK_LOW_FREQUENCY | (FMOD_CHANNELMASK_BACK_LEFT | FMOD_CHANNELMASK_BACK_RIGHT))));
pub const FMOD_CHANNELMASK_7POINT0 = FMOD_CHANNELMASK_FRONT_LEFT | (FMOD_CHANNELMASK_FRONT_RIGHT | (FMOD_CHANNELMASK_FRONT_CENTER | (FMOD_CHANNELMASK_SURROUND_LEFT | (FMOD_CHANNELMASK_SURROUND_RIGHT | (FMOD_CHANNELMASK_BACK_LEFT | FMOD_CHANNELMASK_BACK_RIGHT)))));
pub const FMOD_CHANNELMASK_7POINT1 = FMOD_CHANNELMASK_FRONT_LEFT | (FMOD_CHANNELMASK_FRONT_RIGHT | (FMOD_CHANNELMASK_FRONT_CENTER | (FMOD_CHANNELMASK_LOW_FREQUENCY | (FMOD_CHANNELMASK_SURROUND_LEFT | (FMOD_CHANNELMASK_SURROUND_RIGHT | (FMOD_CHANNELMASK_BACK_LEFT | FMOD_CHANNELMASK_BACK_RIGHT))))));
pub const FMOD_THREAD_PRIORITY_PLATFORM_MIN = -32 * 1024;
pub const FMOD_THREAD_PRIORITY_PLATFORM_MAX = 32 * 1024;
pub const FMOD_THREAD_PRIORITY_DEFAULT = FMOD_THREAD_PRIORITY_PLATFORM_MIN - 1;
pub const FMOD_THREAD_PRIORITY_LOW = FMOD_THREAD_PRIORITY_PLATFORM_MIN - 2;
pub const FMOD_THREAD_PRIORITY_MEDIUM = FMOD_THREAD_PRIORITY_PLATFORM_MIN - 3;
pub const FMOD_THREAD_PRIORITY_HIGH = FMOD_THREAD_PRIORITY_PLATFORM_MIN - 4;
pub const FMOD_THREAD_PRIORITY_VERY_HIGH = FMOD_THREAD_PRIORITY_PLATFORM_MIN - 5;
pub const FMOD_THREAD_PRIORITY_EXTREME = FMOD_THREAD_PRIORITY_PLATFORM_MIN - 6;
pub const FMOD_THREAD_PRIORITY_CRITICAL = FMOD_THREAD_PRIORITY_PLATFORM_MIN - 7;
pub const FMOD_THREAD_PRIORITY_MIXER = FMOD_THREAD_PRIORITY_EXTREME;
pub const FMOD_THREAD_PRIORITY_FEEDER = FMOD_THREAD_PRIORITY_CRITICAL;
pub const FMOD_THREAD_PRIORITY_STREAM = FMOD_THREAD_PRIORITY_VERY_HIGH;
pub const FMOD_THREAD_PRIORITY_FILE = FMOD_THREAD_PRIORITY_HIGH;
pub const FMOD_THREAD_PRIORITY_NONBLOCKING = FMOD_THREAD_PRIORITY_HIGH;
pub const FMOD_THREAD_PRIORITY_RECORD = FMOD_THREAD_PRIORITY_HIGH;
pub const FMOD_THREAD_PRIORITY_GEOMETRY = FMOD_THREAD_PRIORITY_LOW;
pub const FMOD_THREAD_PRIORITY_PROFILER = FMOD_THREAD_PRIORITY_MEDIUM;
pub const FMOD_THREAD_PRIORITY_STUDIO_UPDATE = FMOD_THREAD_PRIORITY_MEDIUM;
pub const FMOD_THREAD_PRIORITY_STUDIO_LOAD_BANK = FMOD_THREAD_PRIORITY_MEDIUM;
pub const FMOD_THREAD_PRIORITY_STUDIO_LOAD_SAMPLE = FMOD_THREAD_PRIORITY_MEDIUM;
pub const FMOD_THREAD_PRIORITY_CONVOLUTION1 = FMOD_THREAD_PRIORITY_VERY_HIGH;
pub const FMOD_THREAD_PRIORITY_CONVOLUTION2 = FMOD_THREAD_PRIORITY_VERY_HIGH;
pub const FMOD_THREAD_STACK_SIZE_DEFAULT = 0;
pub const FMOD_THREAD_STACK_SIZE_MIXER = 80 * 1024;
pub const FMOD_THREAD_STACK_SIZE_FEEDER = 16 * 1024;
pub const FMOD_THREAD_STACK_SIZE_STREAM = 96 * 1024;
pub const FMOD_THREAD_STACK_SIZE_FILE = 48 * 1024;
pub const FMOD_THREAD_STACK_SIZE_NONBLOCKING = 112 * 1024;
pub const FMOD_THREAD_STACK_SIZE_RECORD = 16 * 1024;
pub const FMOD_THREAD_STACK_SIZE_GEOMETRY = 48 * 1024;
pub const FMOD_THREAD_STACK_SIZE_PROFILER = 128 * 1024;
pub const FMOD_THREAD_STACK_SIZE_STUDIO_UPDATE = 96 * 1024;
pub const FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_BANK = 96 * 1024;
pub const FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_SAMPLE = 96 * 1024;
pub const FMOD_THREAD_STACK_SIZE_CONVOLUTION1 = 16 * 1024;
pub const FMOD_THREAD_STACK_SIZE_CONVOLUTION2 = 16 * 1024;
pub const FMOD_THREAD_AFFINITY_GROUP_DEFAULT = 0x8000000000000000;
pub const FMOD_THREAD_AFFINITY_GROUP_A = 0x8000000000000001;
pub const FMOD_THREAD_AFFINITY_GROUP_B = 0x8000000000000002;
pub const FMOD_THREAD_AFFINITY_GROUP_C = 0x8000000000000003;
pub const FMOD_THREAD_AFFINITY_MIXER = FMOD_THREAD_AFFINITY_GROUP_A;
pub const FMOD_THREAD_AFFINITY_FEEDER = FMOD_THREAD_AFFINITY_GROUP_C;
pub const FMOD_THREAD_AFFINITY_STREAM = FMOD_THREAD_AFFINITY_GROUP_C;
pub const FMOD_THREAD_AFFINITY_FILE = FMOD_THREAD_AFFINITY_GROUP_C;
pub const FMOD_THREAD_AFFINITY_NONBLOCKING = FMOD_THREAD_AFFINITY_GROUP_C;
pub const FMOD_THREAD_AFFINITY_RECORD = FMOD_THREAD_AFFINITY_GROUP_C;
pub const FMOD_THREAD_AFFINITY_GEOMETRY = FMOD_THREAD_AFFINITY_GROUP_C;
pub const FMOD_THREAD_AFFINITY_PROFILER = FMOD_THREAD_AFFINITY_GROUP_C;
pub const FMOD_THREAD_AFFINITY_STUDIO_UPDATE = FMOD_THREAD_AFFINITY_GROUP_B;
pub const FMOD_THREAD_AFFINITY_STUDIO_LOAD_BANK = FMOD_THREAD_AFFINITY_GROUP_C;
pub const FMOD_THREAD_AFFINITY_STUDIO_LOAD_SAMPLE = FMOD_THREAD_AFFINITY_GROUP_C;
pub const FMOD_THREAD_AFFINITY_CONVOLUTION1 = FMOD_THREAD_AFFINITY_GROUP_C;
pub const FMOD_THREAD_AFFINITY_CONVOLUTION2 = FMOD_THREAD_AFFINITY_GROUP_C;
pub const FMOD_THREAD_AFFINITY_CORE_ALL = 0;
pub const FMOD_THREAD_AFFINITY_CORE_0 = 1 << 0;
pub const FMOD_THREAD_AFFINITY_CORE_1 = 1 << 1;
pub const FMOD_THREAD_AFFINITY_CORE_2 = 1 << 2;
pub const FMOD_THREAD_AFFINITY_CORE_3 = 1 << 3;
pub const FMOD_THREAD_AFFINITY_CORE_4 = 1 << 4;
pub const FMOD_THREAD_AFFINITY_CORE_5 = 1 << 5;
pub const FMOD_THREAD_AFFINITY_CORE_6 = 1 << 6;
pub const FMOD_THREAD_AFFINITY_CORE_7 = 1 << 7;
pub const FMOD_THREAD_AFFINITY_CORE_8 = 1 << 8;
pub const FMOD_THREAD_AFFINITY_CORE_9 = 1 << 9;
pub const FMOD_THREAD_AFFINITY_CORE_10 = 1 << 10;
pub const FMOD_THREAD_AFFINITY_CORE_11 = 1 << 11;
pub const FMOD_THREAD_AFFINITY_CORE_12 = 1 << 12;
pub const FMOD_THREAD_AFFINITY_CORE_13 = 1 << 13;
pub const FMOD_THREAD_AFFINITY_CORE_14 = 1 << 14;
pub const FMOD_THREAD_AFFINITY_CORE_15 = 1 << 15;
pub const FMOD_MAX_CHANNEL_WIDTH = 32;
pub const FMOD_MAX_SYSTEMS = 8;
pub const FMOD_MAX_LISTENERS = 8;
pub const FMOD_REVERB_MAXINSTANCES = 4;
pub const FMOD_PORT_INDEX_NONE = 0xFFFFFFFFFFFFFFFF;
pub const FMOD_CODEC_WAVEFORMAT_VERSION = 3;
pub const FMOD_PLUGIN_SDK_VERSION = 110;
pub const FMOD_DSP_GETPARAM_VALUESTR_LENGTH = 32;
pub inline fn FMOD_DSP_ALLOC(_state: anytype, _size: anytype) @TypeOf(_state.*.functions.*.alloc(_size, FMOD_MEMORY_NORMAL, __FILE__)) {
    return _state.*.functions.*.alloc(_size, FMOD_MEMORY_NORMAL, __FILE__);
}
pub inline fn FMOD_DSP_REALLOC(_state: anytype, _ptr: anytype, _size: anytype) @TypeOf(_state.*.functions.*.realloc(_ptr, _size, FMOD_MEMORY_NORMAL, __FILE__)) {
    return _state.*.functions.*.realloc(_ptr, _size, FMOD_MEMORY_NORMAL, __FILE__);
}
pub inline fn FMOD_DSP_FREE(_state: anytype, _ptr: anytype) @TypeOf(_state.*.functions.*.free(_ptr, FMOD_MEMORY_NORMAL, __FILE__)) {
    return _state.*.functions.*.free(_ptr, FMOD_MEMORY_NORMAL, __FILE__);
}
pub inline fn FMOD_DSP_GETSAMPLERATE(_state: anytype, _rate: anytype) @TypeOf(_state.*.functions.*.getsamplerate(_state, _rate)) {
    return _state.*.functions.*.getsamplerate(_state, _rate);
}
pub inline fn FMOD_DSP_GETBLOCKSIZE(_state: anytype, _blocksize: anytype) @TypeOf(_state.*.functions.*.getblocksize(_state, _blocksize)) {
    return _state.*.functions.*.getblocksize(_state, _blocksize);
}
pub inline fn FMOD_DSP_GETSPEAKERMODE(_state: anytype, _speakermodemix: anytype, _speakermodeout: anytype) @TypeOf(_state.*.functions.*.getspeakermode(_state, _speakermodemix, _speakermodeout)) {
    return _state.*.functions.*.getspeakermode(_state, _speakermodemix, _speakermodeout);
}
pub inline fn FMOD_DSP_GETCLOCK(_state: anytype, _clock: anytype, _offset: anytype, _length: anytype) @TypeOf(_state.*.functions.*.getclock(_state, _clock, _offset, _length)) {
    return _state.*.functions.*.getclock(_state, _clock, _offset, _length);
}
pub inline fn FMOD_DSP_GETLISTENERATTRIBUTES(_state: anytype, _numlisteners: anytype, _attributes: anytype) @TypeOf(_state.*.functions.*.getlistenerattributes(_state, _numlisteners, _attributes)) {
    return _state.*.functions.*.getlistenerattributes(_state, _numlisteners, _attributes);
}
pub inline fn FMOD_DSP_GETUSERDATA(_state: anytype, _userdata: anytype) @TypeOf(_state.*.functions.*.getuserdata(_state, _userdata)) {
    return _state.*.functions.*.getuserdata(_state, _userdata);
}
pub inline fn FMOD_DSP_DFT_FFTREAL(_state: anytype, _size: anytype, _signal: anytype, _dft: anytype, _window: anytype, _signalhop: anytype) @TypeOf(_state.*.functions.*.dft.*.fftreal(_state, _size, _signal, _dft, _window, _signalhop)) {
    return _state.*.functions.*.dft.*.fftreal(_state, _size, _signal, _dft, _window, _signalhop);
}
pub inline fn FMOD_DSP_DFT_IFFTREAL(_state: anytype, _size: anytype, _dft: anytype, _signal: anytype, _window: anytype, _signalhop: anytype) @TypeOf(_state.*.functions.*.dft.*.inversefftreal(_state, _size, _dft, _signal, _window, _signalhop)) {
    return _state.*.functions.*.dft.*.inversefftreal(_state, _size, _dft, _signal, _window, _signalhop);
}
pub inline fn FMOD_DSP_PAN_SUMMONOMATRIX(_state: anytype, _sourcespeakermode: anytype, _lowfrequencygain: anytype, _overallgain: anytype, _matrix: anytype) @TypeOf(_state.*.functions.*.pan.*.summonomatrix(_state, _sourcespeakermode, _lowfrequencygain, _overallgain, _matrix)) {
    return _state.*.functions.*.pan.*.summonomatrix(_state, _sourcespeakermode, _lowfrequencygain, _overallgain, _matrix);
}
pub inline fn FMOD_DSP_PAN_SUMSTEREOMATRIX(_state: anytype, _sourcespeakermode: anytype, _pan: anytype, _lowfrequencygain: anytype, _overallgain: anytype, _matrixhop: anytype, _matrix: anytype) @TypeOf(_state.*.functions.*.pan.*.sumstereomatrix(_state, _sourcespeakermode, _pan, _lowfrequencygain, _overallgain, _matrixhop, _matrix)) {
    return _state.*.functions.*.pan.*.sumstereomatrix(_state, _sourcespeakermode, _pan, _lowfrequencygain, _overallgain, _matrixhop, _matrix);
}
pub inline fn FMOD_DSP_PAN_SUMSURROUNDMATRIX(_state: anytype, _sourcespeakermode: anytype, _targetspeakermode: anytype, _direction: anytype, _extent: anytype, _rotation: anytype, _lowfrequencygain: anytype, _overallgain: anytype, _matrixhop: anytype, _matrix: anytype, _flags: anytype) @TypeOf(_state.*.functions.*.pan.*.sumsurroundmatrix(_state, _sourcespeakermode, _targetspeakermode, _direction, _extent, _rotation, _lowfrequencygain, _overallgain, _matrixhop, _matrix, _flags)) {
    return _state.*.functions.*.pan.*.sumsurroundmatrix(_state, _sourcespeakermode, _targetspeakermode, _direction, _extent, _rotation, _lowfrequencygain, _overallgain, _matrixhop, _matrix, _flags);
}
pub inline fn FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX(_state: anytype, _targetspeakermode: anytype, _direction: anytype, _extent: anytype, _lowfrequencygain: anytype, _overallgain: anytype, _matrixhop: anytype, _matrix: anytype) @TypeOf(_state.*.functions.*.pan.*.summonotosurroundmatrix(_state, _targetspeakermode, _direction, _extent, _lowfrequencygain, _overallgain, _matrixhop, _matrix)) {
    return _state.*.functions.*.pan.*.summonotosurroundmatrix(_state, _targetspeakermode, _direction, _extent, _lowfrequencygain, _overallgain, _matrixhop, _matrix);
}
pub inline fn FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX(_state: anytype, _targetspeakermode: anytype, _direction: anytype, _extent: anytype, _rotation: anytype, _lowfrequencygain: anytype, _overallgain: anytype, matrixhop: anytype, _matrix: anytype) @TypeOf(_state.*.functions.*.pan.*.sumstereotosurroundmatrix(_state, _targetspeakermode, _direction, _extent, _rotation, _lowfrequencygain, _overallgain, matrixhop, _matrix)) {
    return _state.*.functions.*.pan.*.sumstereotosurroundmatrix(_state, _targetspeakermode, _direction, _extent, _rotation, _lowfrequencygain, _overallgain, matrixhop, _matrix);
}
pub inline fn FMOD_DSP_PAN_GETROLLOFFGAIN(_state: anytype, _rolloff: anytype, _distance: anytype, _mindistance: anytype, _maxdistance: anytype, _gain: anytype) @TypeOf(_state.*.functions.*.pan.*.getrolloffgain(_state, _rolloff, _distance, _mindistance, _maxdistance, _gain)) {
    return _state.*.functions.*.pan.*.getrolloffgain(_state, _rolloff, _distance, _mindistance, _maxdistance, _gain);
}
pub const FMOD_OUTPUT_PLUGIN_VERSION = 4;
pub const FMOD_OUTPUT_METHOD_MIX_DIRECT = 0;
pub const FMOD_OUTPUT_METHOD_POLLING = 1;
pub const FMOD_OUTPUT_METHOD_MIX_BUFFERED = 2;
pub inline fn FMOD_OUTPUT_READFROMMIXER(_state: anytype, _buffer: anytype, _length: anytype) @TypeOf(_state.*.readfrommixer(_state, _buffer, _length)) {
    return _state.*.readfrommixer(_state, _buffer, _length);
}
pub inline fn FMOD_OUTPUT_ALLOC(_state: anytype, _size: anytype, _align: anytype) @TypeOf(_state.*.alloc(_size, _align, __FILE__, __LINE__)) {
    return _state.*.alloc(_size, _align, __FILE__, __LINE__);
}
pub inline fn FMOD_OUTPUT_FREE(_state: anytype, _ptr: anytype) @TypeOf(_state.*.free(_ptr, __FILE__, __LINE__)) {
    return _state.*.free(_ptr, __FILE__, __LINE__);
}
pub inline fn FMOD_OUTPUT_COPYPORT(_state: anytype, _id: anytype, _buffer: anytype, _length: anytype) @TypeOf(_state.*.copyport(_state, _id, _buffer, _length)) {
    return _state.*.copyport(_state, _id, _buffer, _length);
}
pub inline fn FMOD_OUTPUT_REQUESTRESET(_state: anytype) @TypeOf(_state.*.requestreset(_state)) {
    return _state.*.requestreset(_state);
}
